# compiler: R8
# compiler_version: 8.1.65
# min_api: 16
# common_typos_disable
# {"id":"com.android.tools.r8.mapping","version":"2.2"}
# pg_map_id: 7ba058d
# pg_map_hash: SHA-256 7ba058d2ed9ce16f51d3b7b2b76ce23b463b600b162ebe3ddf94ceec64dea3de
androidx.collection.ArrayMap -> a.a:
    androidx.collection.MapCollections mCollections -> h
    void <init>() -> <init>
    1:1:java.util.Set entrySet():0:0 -> entrySet
    1:1:java.util.Set keySet():0:0 -> keySet
    1:1:androidx.collection.MapCollections getCollection():0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"()La/c;"}
    1:1:void putAll(java.util.Map):0:0 -> putAll
    1:1:java.util.Collection values():0:0 -> values
androidx.collection.ArrayMap$1 -> a.a$a:
    androidx.collection.ArrayMap this$0 -> d
    1:1:void <init>(androidx.collection.ArrayMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/a;)V"}
    1:1:void colClear():0:0 -> a
    1:1:java.lang.Object colGetEntry(int,int):0:0 -> b
    1:1:java.util.Map colGetMap():0:0 -> c
    1:1:int colGetSize():0:0 -> d
    1:1:int colIndexOfKey(java.lang.Object):0:0 -> e
    1:1:int colIndexOfValue(java.lang.Object):0:0 -> f
    1:1:void colPut(java.lang.Object,java.lang.Object):0:0 -> g
    1:1:void colRemoveAt(int):0:0 -> h
    1:1:java.lang.Object colSetValue(int,java.lang.Object):0:0 -> i
androidx.collection.ContainerHelpers -> a.b:
    int[] EMPTY_INTS -> a
    long[] EMPTY_LONGS -> b
    java.lang.Object[] EMPTY_OBJECTS -> c
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:int binarySearch(int[],int,int):0:0 -> a
    1:1:boolean equal(java.lang.Object,java.lang.Object):0:0 -> b
androidx.collection.MapCollections -> a.c:
    androidx.collection.MapCollections$EntrySet mEntrySet -> a
    androidx.collection.MapCollections$KeySet mKeySet -> b
    androidx.collection.MapCollections$ValuesCollection mValues -> c
    void <init>() -> <init>
    void colClear() -> a
    java.lang.Object colGetEntry(int,int) -> b
    java.util.Map colGetMap() -> c
    int colGetSize() -> d
    int colIndexOfKey(java.lang.Object) -> e
    int colIndexOfValue(java.lang.Object) -> f
    void colPut(java.lang.Object,java.lang.Object) -> g
    void colRemoveAt(int) -> h
    java.lang.Object colSetValue(int,java.lang.Object) -> i
    1:1:boolean containsAllHelper(java.util.Map,java.util.Collection):0:0 -> j
    1:1:boolean equalsSetHelper(java.util.Set,java.lang.Object):0:0 -> k
    1:1:java.util.Set getEntrySet():0:0 -> l
    1:1:java.util.Set getKeySet():0:0 -> m
    1:1:java.util.Collection getValues():0:0 -> n
    1:1:boolean removeAllHelper(java.util.Map,java.util.Collection):0:0 -> o
    1:1:boolean retainAllHelper(java.util.Map,java.util.Collection):0:0 -> p
    1:1:java.lang.Object[] toArrayHelper(int):0:0 -> q
    1:1:java.lang.Object[] toArrayHelper(java.lang.Object[],int):0:0 -> r
androidx.collection.MapCollections$ArrayIterator -> a.c$a:
    int mOffset -> d
    int mSize -> e
    int mIndex -> f
    boolean mCanRemove -> g
    androidx.collection.MapCollections this$0 -> h
    1:1:void <init>(androidx.collection.MapCollections,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;I)V"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
androidx.collection.MapCollections$EntrySet -> a.c$b:
    androidx.collection.MapCollections this$0 -> d
    1:1:void <init>(androidx.collection.MapCollections):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;)V"}
    1:1:boolean add(java.util.Map$Entry):0:0 -> a
    1:1:boolean add(java.lang.Object):0:0 -> add
    1:1:boolean addAll(java.util.Collection):0:0 -> addAll
    1:1:void clear():0:0 -> clear
    1:1:boolean contains(java.lang.Object):0:0 -> contains
    1:1:boolean containsAll(java.util.Collection):0:0 -> containsAll
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:boolean isEmpty():0:0 -> isEmpty
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:boolean remove(java.lang.Object):0:0 -> remove
    1:1:boolean removeAll(java.util.Collection):0:0 -> removeAll
    1:1:boolean retainAll(java.util.Collection):0:0 -> retainAll
    1:1:int size():0:0 -> size
    1:1:java.lang.Object[] toArray():0:0 -> toArray
    2:2:java.lang.Object[] toArray(java.lang.Object[]):0:0 -> toArray
androidx.collection.MapCollections$KeySet -> a.c$c:
    androidx.collection.MapCollections this$0 -> d
    1:1:void <init>(androidx.collection.MapCollections):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;)V"}
    1:1:boolean add(java.lang.Object):0:0 -> add
    1:1:boolean addAll(java.util.Collection):0:0 -> addAll
    1:1:void clear():0:0 -> clear
    1:1:boolean contains(java.lang.Object):0:0 -> contains
    1:1:boolean containsAll(java.util.Collection):0:0 -> containsAll
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:boolean isEmpty():0:0 -> isEmpty
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:boolean remove(java.lang.Object):0:0 -> remove
    1:1:boolean removeAll(java.util.Collection):0:0 -> removeAll
    1:1:boolean retainAll(java.util.Collection):0:0 -> retainAll
    1:1:int size():0:0 -> size
    1:1:java.lang.Object[] toArray():0:0 -> toArray
    2:2:java.lang.Object[] toArray(java.lang.Object[]):0:0 -> toArray
androidx.collection.MapCollections$MapIterator -> a.c$d:
    int mEnd -> d
    int mIndex -> e
    boolean mEntryValid -> f
    androidx.collection.MapCollections this$0 -> g
    1:1:void <init>(androidx.collection.MapCollections):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;)V"}
    1:1:java.util.Map$Entry next():0:0 -> a
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:java.lang.Object getKey():0:0 -> getKey
    1:1:java.lang.Object getValue():0:0 -> getValue
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
    1:1:java.lang.Object setValue(java.lang.Object):0:0 -> setValue
    1:1:java.lang.String toString():0:0 -> toString
androidx.collection.MapCollections$ValuesCollection -> a.c$e:
    androidx.collection.MapCollections this$0 -> d
    1:1:void <init>(androidx.collection.MapCollections):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;)V"}
    1:1:boolean add(java.lang.Object):0:0 -> add
    1:1:boolean addAll(java.util.Collection):0:0 -> addAll
    1:1:void clear():0:0 -> clear
    1:1:boolean contains(java.lang.Object):0:0 -> contains
    1:1:boolean containsAll(java.util.Collection):0:0 -> containsAll
    1:1:boolean isEmpty():0:0 -> isEmpty
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:boolean remove(java.lang.Object):0:0 -> remove
    1:1:boolean removeAll(java.util.Collection):0:0 -> removeAll
    1:1:boolean retainAll(java.util.Collection):0:0 -> retainAll
    1:1:int size():0:0 -> size
    1:1:java.lang.Object[] toArray():0:0 -> toArray
    2:2:java.lang.Object[] toArray(java.lang.Object[]):0:0 -> toArray
androidx.collection.SimpleArrayMap -> a.d:
    int[] mHashes -> a
    java.lang.Object[] mArray -> b
    int mSize -> c
    java.lang.Object[] mBaseCache -> d
    int mBaseCacheSize -> e
    java.lang.Object[] mTwiceBaseCache -> f
    int mTwiceBaseCacheSize -> g
    1:1:void <init>():0:0 -> <init>
    1:1:void allocArrays(int):0:0 -> a
    1:1:int binarySearchHashes(int[],int,int):0:0 -> b
    1:1:void ensureCapacity(int):0:0 -> c
    1:1:void clear():0:0 -> clear
    1:1:boolean containsKey(java.lang.Object):0:0 -> containsKey
    1:1:boolean containsValue(java.lang.Object):0:0 -> containsValue
    1:1:void freeArrays(int[],java.lang.Object[],int):0:0 -> d
    1:1:int indexOf(java.lang.Object,int):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int indexOfKey(java.lang.Object):0:0 -> f
    1:1:int indexOfNull():0:0 -> g
    1:1:java.lang.Object get(java.lang.Object):0:0 -> get
    1:1:java.lang.Object getOrDefault(java.lang.Object,java.lang.Object):0:0 -> getOrDefault
    1:1:int indexOfValue(java.lang.Object):0:0 -> h
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.Object keyAt(int):0:0 -> i
    1:1:boolean isEmpty():0:0 -> isEmpty
    1:1:java.lang.Object removeAt(int):0:0 -> j
    1:1:java.lang.Object setValueAt(int,java.lang.Object):0:0 -> k
    1:1:java.lang.Object valueAt(int):0:0 -> l
    1:1:java.lang.Object put(java.lang.Object,java.lang.Object):0:0 -> put
    1:1:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object):0:0 -> putIfAbsent
    1:1:java.lang.Object remove(java.lang.Object):0:0 -> remove
    2:2:boolean remove(java.lang.Object,java.lang.Object):0:0 -> remove
    1:1:java.lang.Object replace(java.lang.Object,java.lang.Object):0:0 -> replace
    2:2:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object):0:0 -> replace
    1:1:int size():0:0 -> size
    1:1:java.lang.String toString():0:0 -> toString
androidx.core.app.CoreComponentFactory -> androidx.core.app.CoreComponentFactory:
    1:1:java.lang.Object checkCompatWrapper(java.lang.Object):0:0 -> a
androidx.core.app.RemoteActionCompat -> androidx.core.app.RemoteActionCompat:
    androidx.core.graphics.drawable.IconCompat mIcon -> a
    java.lang.CharSequence mTitle -> b
    java.lang.CharSequence mContentDescription -> c
    android.app.PendingIntent mActionIntent -> d
    boolean mEnabled -> e
    boolean mShouldShowIcon -> f
androidx.core.graphics.drawable.IconCompat -> androidx.core.graphics.drawable.IconCompat:
    int mType -> a
    java.lang.Object mObj1 -> b
    byte[] mData -> c
    android.os.Parcelable mParcelable -> d
    int mInt1 -> e
    int mInt2 -> f
    android.content.res.ColorStateList mTintList -> g
    android.graphics.PorterDuff$Mode mTintMode -> h
    java.lang.String mTintModeStr -> i
    java.lang.String mString1 -> j
    android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE -> k
    1:1:android.graphics.Bitmap createLegacyIconFromAdaptiveIcon(android.graphics.Bitmap,boolean):0:0 -> a
    1:1:int getResId():0:0 -> b
    1:1:java.lang.String getResPackage():0:0 -> c
    1:1:android.net.Uri getUri():0:0 -> d
    1:1:java.io.InputStream getUriInputStream(android.content.Context):0:0 -> e
    1:1:void onPostParceling():0:0 -> f
    1:1:void onPreParceling(boolean):0:0 -> g
    1:1:java.lang.String typeToString(int):0:0 -> h
androidx.core.graphics.drawable.IconCompat$Api23Impl -> androidx.core.graphics.drawable.IconCompat$a:
    1:1:int getResId(java.lang.Object):0:0 -> a
    1:1:java.lang.String getResPackage(java.lang.Object):0:0 -> b
    1:1:android.net.Uri getUri(java.lang.Object):0:0 -> c
    1:1:android.graphics.drawable.Drawable loadDrawable(android.graphics.drawable.Icon,android.content.Context):0:0 -> d
    1:1:android.graphics.drawable.Icon toIcon(androidx.core.graphics.drawable.IconCompat,android.content.Context):0:0 -> e
androidx.core.graphics.drawable.IconCompat$Api26Impl -> androidx.core.graphics.drawable.IconCompat$b:
    1:1:android.graphics.drawable.Drawable createAdaptiveIconDrawable(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable):0:0 -> a
    1:1:android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap):0:0 -> b
androidx.core.graphics.drawable.IconCompat$Api28Impl -> androidx.core.graphics.drawable.IconCompat$c:
    1:1:int getResId(java.lang.Object):0:0 -> a
    1:1:java.lang.String getResPackage(java.lang.Object):0:0 -> b
    1:1:int getType(java.lang.Object):0:0 -> c
    1:1:android.net.Uri getUri(java.lang.Object):0:0 -> d
androidx.core.graphics.drawable.IconCompat$Api30Impl -> androidx.core.graphics.drawable.IconCompat$d:
    1:1:android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri):0:0 -> a
androidx.lifecycle.LiveData$ObserverWrapper -> androidx.lifecycle.a:
androidx.savedstate.Recreator -> androidx.savedstate.Recreator:
    androidx.savedstate.Recreator$Companion Companion -> a
androidx.savedstate.Recreator$Companion -> androidx.savedstate.Recreator$a:
    void <init>() -> <init>
    1:1:void <init>(kotlin.jvm.internal.DefaultConstructorMarker):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk0/b;)V"}
androidx.versionedparcelable.ParcelImpl -> androidx.versionedparcelable.ParcelImpl:
    androidx.versionedparcelable.VersionedParcelable mParcel -> a
androidx.versionedparcelable.ParcelImpl$1 -> androidx.versionedparcelable.ParcelImpl$a:
    1:1:androidx.versionedparcelable.ParcelImpl createFromParcel(android.os.Parcel):0:0 -> a
    1:1:androidx.versionedparcelable.ParcelImpl[] newArray(int):0:0 -> b
androidx.versionedparcelable.VersionedParcel -> androidx.versionedparcelable.a:
    androidx.collection.ArrayMap mReadCache -> a
    androidx.collection.ArrayMap mWriteCache -> b
    androidx.collection.ArrayMap mParcelizerCache -> c
    1:1:void <init>(androidx.collection.ArrayMap,androidx.collection.ArrayMap,androidx.collection.ArrayMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/a;La/a;La/a;)V"}
    void writeByteArray(byte[]) -> A
    1:1:void writeByteArray(byte[],int):0:0 -> B
    void writeCharSequence(java.lang.CharSequence) -> C
    1:1:void writeCharSequence(java.lang.CharSequence,int):0:0 -> D
    void writeInt(int) -> E
    1:1:void writeInt(int,int):0:0 -> F
    void writeParcelable(android.os.Parcelable) -> G
    1:1:void writeParcelable(android.os.Parcelable,int):0:0 -> H
    void writeString(java.lang.String) -> I
    1:1:void writeString(java.lang.String,int):0:0 -> J
    1:1:void writeToParcel(androidx.versionedparcelable.VersionedParcelable,androidx.versionedparcelable.VersionedParcel):0:0 -> K
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/a;Landroidx/versionedparcelable/a;)V"}
    1:1:void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable):0:0 -> L
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/a;)V"}
    1:1:void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable,int):0:0 -> M
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/a;I)V"}
    1:1:void writeVersionedParcelableCreator(androidx.versionedparcelable.VersionedParcelable):0:0 -> N
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/a;)V"}
    void closeField() -> a
    androidx.versionedparcelable.VersionedParcel createSubParcel() -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Landroidx/versionedparcelable/a;"}
    1:1:java.lang.Class findParcelClass(java.lang.Class):0:0 -> c
    1:1:java.lang.reflect.Method getReadMethod(java.lang.String):0:0 -> d
    1:1:java.lang.reflect.Method getWriteMethod(java.lang.Class):0:0 -> e
    1:1:boolean isStream():0:0 -> f
    boolean readBoolean() -> g
    1:1:boolean readBoolean(boolean,int):0:0 -> h
    byte[] readByteArray() -> i
    1:1:byte[] readByteArray(byte[],int):0:0 -> j
    java.lang.CharSequence readCharSequence() -> k
    1:1:java.lang.CharSequence readCharSequence(java.lang.CharSequence,int):0:0 -> l
    boolean readField(int) -> m
    1:1:androidx.versionedparcelable.VersionedParcelable readFromParcel(java.lang.String,androidx.versionedparcelable.VersionedParcel):0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;Landroidx/versionedparcelable/a;)Lb/a;"}
    int readInt() -> o
    1:1:int readInt(int,int):0:0 -> p
    android.os.Parcelable readParcelable() -> q
    1:1:android.os.Parcelable readParcelable(android.os.Parcelable,int):0:0 -> r
    java.lang.String readString() -> s
    1:1:java.lang.String readString(java.lang.String,int):0:0 -> t
    1:1:androidx.versionedparcelable.VersionedParcelable readVersionedParcelable():0:0 -> u
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lb/a;"}
    1:1:androidx.versionedparcelable.VersionedParcelable readVersionedParcelable(androidx.versionedparcelable.VersionedParcelable,int):0:0 -> v
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/a;I)Lb/a;"}
    void setOutputField(int) -> w
    1:1:void setSerializationFlags(boolean,boolean):0:0 -> x
    void writeBoolean(boolean) -> y
    1:1:void writeBoolean(boolean,int):0:0 -> z
androidx.versionedparcelable.VersionedParcelParcel -> androidx.versionedparcelable.b:
    android.util.SparseIntArray mPositionLookup -> d
    android.os.Parcel mParcel -> e
    int mOffset -> f
    int mEnd -> g
    java.lang.String mPrefix -> h
    int mCurrentField -> i
    int mNextRead -> j
    int mFieldId -> k
    1:1:void <init>(android.os.Parcel):0:0 -> <init>
    2:2:void <init>(android.os.Parcel,int,int,java.lang.String,androidx.collection.ArrayMap,androidx.collection.ArrayMap,androidx.collection.ArrayMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Landroid/os/Parcel;IILjava/lang/String;La/a;La/a;La/a;)V"}
    1:1:void writeByteArray(byte[]):0:0 -> A
    1:1:void writeCharSequence(java.lang.CharSequence):0:0 -> C
    1:1:void writeInt(int):0:0 -> E
    1:1:void writeParcelable(android.os.Parcelable):0:0 -> G
    1:1:void writeString(java.lang.String):0:0 -> I
    1:1:void closeField():0:0 -> a
    1:1:androidx.versionedparcelable.VersionedParcel createSubParcel():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Landroidx/versionedparcelable/a;"}
    1:1:boolean readBoolean():0:0 -> g
    1:1:byte[] readByteArray():0:0 -> i
    1:1:java.lang.CharSequence readCharSequence():0:0 -> k
    1:1:boolean readField(int):0:0 -> m
    1:1:int readInt():0:0 -> o
    1:1:android.os.Parcelable readParcelable():0:0 -> q
    1:1:java.lang.String readString():0:0 -> s
    1:1:void setOutputField(int):0:0 -> w
    1:1:void writeBoolean(boolean):0:0 -> y
androidx.versionedparcelable.VersionedParcelable -> b.a:
com.badlogic.gdx.AbstractGraphics -> c.a:
    void <init>() -> <init>
com.badlogic.gdx.AbstractInput -> c.b:
    boolean[] pressedKeys -> a
    boolean[] justPressedKeys -> b
    com.badlogic.gdx.utils.IntSet keysToCatch -> c
    int pressedKeyCount -> d
    boolean keyJustPressed -> e
    1:1:void <init>():0:0 -> <init>
    1:1:boolean isCatchBackKey():0:0 -> a
    1:1:boolean isCatchKey(int):0:0 -> b
    1:1:void setCatchKey(int,boolean):0:0 -> c
com.badlogic.gdx.Application -> c.c:
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    com.badlogic.gdx.Application$ApplicationType getType() -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lc/c$a;"}
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> c
    void error(java.lang.String,java.lang.String) -> d
    void log(java.lang.String,java.lang.String) -> e
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/l;)V"}
    com.badlogic.gdx.Graphics getGraphics() -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lc/j;"}
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lc/d;"}
    void postRunnable(java.lang.Runnable) -> j
    int getVersion() -> k
com.badlogic.gdx.Application$ApplicationType -> c.c$a:
    com.badlogic.gdx.Application$ApplicationType Android -> d
    com.badlogic.gdx.Application$ApplicationType Desktop -> e
    com.badlogic.gdx.Application$ApplicationType HeadlessDesktop -> f
    com.badlogic.gdx.Application$ApplicationType Applet -> g
    com.badlogic.gdx.Application$ApplicationType WebGL -> h
    com.badlogic.gdx.Application$ApplicationType iOS -> i
    com.badlogic.gdx.Application$ApplicationType[] $VALUES -> j
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.Application$ApplicationType valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lc/c$a;"}
    1:1:com.badlogic.gdx.Application$ApplicationType[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lc/c$a;"}
com.badlogic.gdx.ApplicationListener -> c.d:
    void resume() -> a
    void pause() -> b
    void dispose() -> c
    void resize(int,int) -> d
    void create() -> e
    void render() -> f
com.badlogic.gdx.ApplicationLogger -> c.e:
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> c
    void error(java.lang.String,java.lang.String) -> d
    void log(java.lang.String,java.lang.String) -> e
com.badlogic.gdx.Audio -> c.f:
com.badlogic.gdx.Files -> c.g:
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lj/a;"}
    java.lang.String getLocalStoragePath() -> b
    java.lang.String getExternalStoragePath() -> c
com.badlogic.gdx.Files$FileType -> c.g$a:
    com.badlogic.gdx.Files$FileType Classpath -> d
    com.badlogic.gdx.Files$FileType Internal -> e
    com.badlogic.gdx.Files$FileType External -> f
    com.badlogic.gdx.Files$FileType Absolute -> g
    com.badlogic.gdx.Files$FileType Local -> h
    com.badlogic.gdx.Files$FileType[] $VALUES -> i
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.Files$FileType valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lc/g$a;"}
    1:1:com.badlogic.gdx.Files$FileType[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lc/g$a;"}
com.badlogic.gdx.Game -> c.h:
    com.badlogic.gdx.Screen screen -> a
    void <init>() -> <init>
    1:1:void resume():0:0 -> a
    1:1:void pause():0:0 -> b
    1:1:void dispose():0:0 -> c
    1:1:void resize(int,int):0:0 -> d
    1:1:void render():0:0 -> f
    1:1:void setScreen(com.badlogic.gdx.Screen):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/n;)V"}
com.badlogic.gdx.Gdx -> c.i:
    com.badlogic.gdx.Application app -> a
    com.badlogic.gdx.Graphics graphics -> b
    com.badlogic.gdx.Audio audio -> c
    com.badlogic.gdx.Input input -> d
    com.badlogic.gdx.Files files -> e
    com.badlogic.gdx.Net net -> f
    com.badlogic.gdx.graphics.GL20 gl -> g
    com.badlogic.gdx.graphics.GL20 gl20 -> h
    com.badlogic.gdx.graphics.GL30 gl30 -> i
com.badlogic.gdx.Graphics -> c.j:
    int getWidth() -> a
    int getHeight() -> c
    int getBackBufferHeight() -> d
    int getBackBufferWidth() -> e
    boolean supportsExtension(java.lang.String) -> f
    com.badlogic.gdx.Graphics$DisplayMode getDisplayMode() -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lc/j$b;"}
    void requestRendering() -> h
    float getDeltaTime() -> i
com.badlogic.gdx.Graphics$BufferFormat -> c.j$a:
    int r -> a
    int g -> b
    int b -> c
    int a -> d
    int depth -> e
    int stencil -> f
    int samples -> g
    boolean coverageSampling -> h
    1:1:void <init>(int,int,int,int,int,int,int,boolean):0:0 -> <init>
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.Graphics$DisplayMode -> c.j$b:
    int width -> a
    int height -> b
    int refreshRate -> c
    int bitsPerPixel -> d
    1:1:void <init>(int,int,int,int):0:0 -> <init>
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.Input -> c.k:
    boolean isCatchBackKey() -> a
com.badlogic.gdx.Input$OnscreenKeyboardType -> c.k$a:
    com.badlogic.gdx.Input$OnscreenKeyboardType Default -> d
    com.badlogic.gdx.Input$OnscreenKeyboardType NumberPad -> e
    com.badlogic.gdx.Input$OnscreenKeyboardType PhonePad -> f
    com.badlogic.gdx.Input$OnscreenKeyboardType Email -> g
    com.badlogic.gdx.Input$OnscreenKeyboardType Password -> h
    com.badlogic.gdx.Input$OnscreenKeyboardType URI -> i
    com.badlogic.gdx.Input$OnscreenKeyboardType[] $VALUES -> j
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.Input$OnscreenKeyboardType valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lc/k$a;"}
    1:1:com.badlogic.gdx.Input$OnscreenKeyboardType[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lc/k$a;"}
com.badlogic.gdx.Input$Orientation -> c.k$b:
    com.badlogic.gdx.Input$Orientation Landscape -> d
    com.badlogic.gdx.Input$Orientation Portrait -> e
    com.badlogic.gdx.Input$Orientation[] $VALUES -> f
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.Input$Orientation valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lc/k$b;"}
    1:1:com.badlogic.gdx.Input$Orientation[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lc/k$b;"}
com.badlogic.gdx.LifecycleListener -> c.l:
    void resume() -> a
    void pause() -> b
    void dispose() -> c
com.badlogic.gdx.Net -> c.m:
com.badlogic.gdx.Screen -> c.n:
    void resume() -> a
    void pause() -> b
    void render(float) -> c
    void resize(int,int) -> d
    void hide() -> e
    void show() -> f
com.badlogic.gdx.assets.AssetLoaderParameters -> d.a:
    void <init>() -> <init>
com.badlogic.gdx.assets.loaders.AssetLoader -> e.a:
    com.badlogic.gdx.assets.loaders.FileHandleResolver resolver -> a
    1:1:void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/c;)V"}
    1:1:com.badlogic.gdx.files.FileHandle resolve(java.lang.String):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lj/a;"}
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader -> e.b:
    1:1:void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/c;)V"}
com.badlogic.gdx.assets.loaders.FileHandleResolver -> e.c:
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lj/a;"}
com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver -> f.a:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.files.FileHandle resolve(java.lang.String):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lj/a;"}
com.badlogic.gdx.backends.android.AndroidApplication -> g.b:
    com.badlogic.gdx.backends.android.AndroidGraphics graphics -> a
    com.badlogic.gdx.backends.android.AndroidInput input -> b
    com.badlogic.gdx.backends.android.AndroidAudio audio -> c
    com.badlogic.gdx.backends.android.AndroidFiles files -> d
    com.badlogic.gdx.backends.android.AndroidNet net -> e
    com.badlogic.gdx.backends.android.AndroidClipboard clipboard -> f
    com.badlogic.gdx.ApplicationListener listener -> g
    android.os.Handler handler -> h
    boolean firstResume -> i
    com.badlogic.gdx.utils.Array runnables -> j
    com.badlogic.gdx.utils.Array executedRunnables -> k
    com.badlogic.gdx.utils.SnapshotArray lifecycleListeners -> l
    com.badlogic.gdx.utils.Array androidEventListeners -> m
    int logLevel -> n
    com.badlogic.gdx.ApplicationLogger applicationLogger -> o
    boolean useImmersiveMode -> p
    int wasFocusChanged -> q
    boolean isWaitingForAudio -> r
    1:1:void <init>():0:0 -> <init>
    1:1:void init(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,boolean):0:0 -> A
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/d;Lg/d;Z)V"}
    1:1:void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration):0:0 -> B
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/d;Lg/d;)V"}
    1:1:void setApplicationLogger(com.badlogic.gdx.ApplicationLogger):0:0 -> C
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/e;)V"}
    1:1:void error(java.lang.String,java.lang.String,java.lang.Throwable):0:0 -> a
    1:1:com.badlogic.gdx.Application$ApplicationType getType():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lc/c$a;"}
    1:1:void log(java.lang.String,java.lang.String,java.lang.Throwable):0:0 -> c
    1:1:void error(java.lang.String,java.lang.String):0:0 -> d
    1:1:void log(java.lang.String,java.lang.String):0:0 -> e
    1:1:void addLifecycleListener(com.badlogic.gdx.LifecycleListener):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/l;)V"}
    1:1:com.badlogic.gdx.Graphics getGraphics():0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lc/j;"}
    1:1:android.os.Handler getHandler():0:0 -> getHandler
    1:1:com.badlogic.gdx.ApplicationListener getApplicationListener():0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lc/d;"}
    1:1:com.badlogic.gdx.utils.Array getExecutedRunnables():0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/a;"}
    1:1:void postRunnable(java.lang.Runnable):0:0 -> j
    1:1:int getVersion():0:0 -> k
    1:1:void useImmersiveMode(boolean):0:0 -> l
    1:1:com.badlogic.gdx.utils.Array getRunnables():0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/a;"}
    1:1:android.content.Context getContext():0:0 -> n
    1:1:android.view.Window getApplicationWindow():0:0 -> o
    1:1:void onActivityResult(int,int,android.content.Intent):0:0 -> onActivityResult
    1:1:void onConfigurationChanged(android.content.res.Configuration):0:0 -> onConfigurationChanged
    1:1:void onDestroy():0:0 -> onDestroy
    1:1:void onPause():0:0 -> onPause
    1:1:void onResume():0:0 -> onResume
    1:1:void onWindowFocusChanged(boolean):0:0 -> onWindowFocusChanged
    1:1:com.badlogic.gdx.backends.android.AndroidInput getInput():0:0 -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lg/c0;"}
    1:1:com.badlogic.gdx.utils.SnapshotArray getLifecycleListeners():0:0 -> q
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/t;"}
    1:1:com.badlogic.gdx.backends.android.AndroidAudio createAudio(android.content.Context,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration):0:0 -> r
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Landroid/content/Context;Lg/d;)Lg/f;"}
    1:1:com.badlogic.gdx.backends.android.AndroidFiles createFiles():0:0 -> s
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lg/i;"}
    1:1:com.badlogic.gdx.backends.android.AndroidInput createInput(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration):0:0 -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;Landroid/content/Context;Ljava/lang/Object;Lg/d;)Lg/c0;"}
    1:1:android.widget.FrameLayout$LayoutParams createLayoutParams():0:0 -> u
    1:1:void createWakeLock(boolean):0:0 -> v
    1:1:com.badlogic.gdx.ApplicationLogger getApplicationLogger():0:0 -> w
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lc/e;"}
    1:1:com.badlogic.gdx.Audio getAudio():0:0 -> x
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lc/f;"}
    1:1:com.badlogic.gdx.Files getFiles():0:0 -> y
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lc/g;"}
    1:1:com.badlogic.gdx.Net getNet():0:0 -> z
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lc/m;"}
com.badlogic.gdx.backends.android.AndroidApplication$$ExternalSyntheticThrowCCEIfNotNull0 -> g.a:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:void com.badlogic.gdx.backends.android.AndroidApplication$$InternalSyntheticThrowCCEIfNotNull$5$7e19105f211fdba93b8ef35a61b927921912d87f00adffd5bd7a774dd95bfced$0.m(java.lang.Object):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidApplication$1 -> g.b$a:
    com.badlogic.gdx.backends.android.AndroidApplication this$0 -> a
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidApplication):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/b;)V"}
    1:1:void resume():0:0 -> a
    1:1:void pause():0:0 -> b
    1:1:void dispose():0:0 -> c
com.badlogic.gdx.backends.android.AndroidApplicationBase -> g.c:
    android.os.Handler getHandler() -> getHandler
    android.view.WindowManager getWindowManager() -> getWindowManager
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/a;"}
    void useImmersiveMode(boolean) -> l
    com.badlogic.gdx.utils.Array getRunnables() -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/a;"}
    android.content.Context getContext() -> n
    android.view.Window getApplicationWindow() -> o
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lg/c0;"}
    com.badlogic.gdx.utils.SnapshotArray getLifecycleListeners() -> q
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/t;"}
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration -> g.d:
    int r -> a
    int g -> b
    int b -> c
    int a -> d
    int depth -> e
    int stencil -> f
    int numSamples -> g
    boolean useAccelerometer -> h
    boolean useGyroscope -> i
    boolean useCompass -> j
    boolean useRotationVectorSensor -> k
    int sensorDelay -> l
    int touchSleepTime -> m
    boolean useWakelock -> n
    boolean disableAudio -> o
    int maxSimultaneousSounds -> p
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> q
    boolean getTouchEventsForLiveWallpaper -> r
    boolean useImmersiveMode -> s
    boolean useGL30 -> t
    int maxNetThreads -> u
    com.badlogic.gdx.backends.android.GdxNativeLoader nativeLoader -> v
    1:1:void <init>():0:0 -> <init>
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration$1 -> g.d$a:
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration this$0 -> a
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidApplicationConfiguration):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/d;)V"}
    1:1:void load():0:0 -> a
com.badlogic.gdx.backends.android.AndroidApplicationLogger -> g.e:
    void <init>() -> <init>
    1:1:void error(java.lang.String,java.lang.String,java.lang.Throwable):0:0 -> a
    1:1:void log(java.lang.String,java.lang.String,java.lang.Throwable):0:0 -> c
    1:1:void error(java.lang.String,java.lang.String):0:0 -> d
    1:1:void log(java.lang.String,java.lang.String):0:0 -> e
com.badlogic.gdx.backends.android.AndroidAudio -> g.f:
    void resume() -> a
    void pause() -> b
com.badlogic.gdx.backends.android.AndroidClipboard -> g.g:
    android.content.ClipboardManager clipboard -> a
    1:1:void <init>(android.content.Context):0:0 -> <init>
com.badlogic.gdx.backends.android.AndroidFileHandle -> g.h:
    android.content.res.AssetManager assets -> c
    1:1:void <init>(android.content.res.AssetManager,java.io.File,com.badlogic.gdx.Files$FileType):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Landroid/content/res/AssetManager;Ljava/io/File;Lc/g$a;)V"}
    2:2:void <init>(android.content.res.AssetManager,java.lang.String,com.badlogic.gdx.Files$FileType):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Landroid/content/res/AssetManager;Ljava/lang/String;Lc/g$a;)V"}
    1:1:com.badlogic.gdx.files.FileHandle child(java.lang.String):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lj/a;"}
    1:1:java.io.File file():0:0 -> d
    1:1:long length():0:0 -> e
    1:1:com.badlogic.gdx.files.FileHandle parent():0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lj/a;"}
    1:1:java.io.InputStream read():0:0 -> i
com.badlogic.gdx.backends.android.AndroidFiles -> g.i:
com.badlogic.gdx.backends.android.AndroidGL20 -> g.j:
    int[] ints -> a
    int[] ints2 -> b
    int[] ints3 -> c
    byte[] buffer -> d
    1:1:void <init>():0:0 -> <init>
    1:1:void glClear(int):0:0 -> A
    1:1:void glUniform1i(int,int):0:0 -> B
    1:1:void glTexParameteri(int,int,int):0:0 -> C
    1:1:void glBindBuffer(int,int):0:0 -> D
    1:1:void glBufferData(int,int,java.nio.Buffer,int):0:0 -> F
    1:1:void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer):0:0 -> G
    1:1:int glGetUniformLocation(int,java.lang.String):0:0 -> H
    1:1:void glDisable(int):0:0 -> I
    1:1:void glVertexAttribPointer(int,int,int,boolean,int,int):0:0 -> J
    1:1:int glGetAttribLocation(int,java.lang.String):0:0 -> K
    1:1:void glPixelStorei(int,int):0:0 -> L
    1:1:java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.IntBuffer):0:0 -> M
    1:1:void glDepthMask(boolean):0:0 -> N
    1:1:void glDisableVertexAttribArray(int):0:0 -> O
    1:1:void glClearColor(float,float,float,float):0:0 -> P
    1:1:int glCreateShader(int):0:0 -> Q
    1:1:void glGetIntegerv(int,java.nio.IntBuffer):0:0 -> S
    1:1:void glBindTexture(int,int):0:0 -> T
    1:1:void glCompileShader(int):0:0 -> U
    1:1:void glGetShaderiv(int,int,java.nio.IntBuffer):0:0 -> V
    1:1:void glEnable(int):0:0 -> a
    1:1:int glGenBuffer():0:0 -> b
    1:1:void glDrawArrays(int,int,int):0:0 -> c
    1:1:void glUniformMatrix4fv(int,int,boolean,float[],int):0:0 -> d
    1:1:void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer):0:0 -> e
    1:1:void glGetFloatv(int,java.nio.FloatBuffer):0:0 -> f
    1:1:void glViewport(int,int,int,int):0:0 -> g
    1:1:void glShaderSource(int,java.lang.String):0:0 -> h
    1:1:void glAttachShader(int,int):0:0 -> i
    1:1:void glTexParameterf(int,int,float):0:0 -> j
    1:1:java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.IntBuffer):0:0 -> k
    1:1:void glUseProgram(int):0:0 -> l
    1:1:void glGenerateMipmap(int):0:0 -> m
    1:1:void glGetProgramiv(int,int,java.nio.IntBuffer):0:0 -> n
    1:1:void glLinkProgram(int):0:0 -> o
    1:1:void glBufferSubData(int,int,int,java.nio.Buffer):0:0 -> p
    1:1:java.lang.String glGetShaderInfoLog(int):0:0 -> q
    1:1:void glDrawElements(int,int,int,java.nio.Buffer):0:0 -> r
    1:1:void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer):0:0 -> s
    1:1:int glGenTexture():0:0 -> t
    1:1:int glCreateProgram():0:0 -> u
    1:1:void glBlendFuncSeparate(int,int,int,int):0:0 -> v
    1:1:void glDrawElements(int,int,int,int):0:0 -> w
    1:1:java.lang.String glGetProgramInfoLog(int):0:0 -> x
    1:1:void glEnableVertexAttribArray(int):0:0 -> y
    1:1:java.lang.String glGetString(int):0:0 -> z
com.badlogic.gdx.backends.android.AndroidGL30 -> g.m:
    void <init>() -> <init>
    1:1:void glGenVertexArrays(int,java.nio.IntBuffer):0:0 -> E
    1:1:void glBindVertexArray(int):0:0 -> R
com.badlogic.gdx.backends.android.AndroidGL30$$ExternalSyntheticApiModelOutline0 -> g.k:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:void com.badlogic.gdx.backends.android.AndroidGL30$$InternalSyntheticApiModelOutline$1$af67515134cee0fb014555e7583e6db0cc29a2baabe8756c0cf402c2e46539c0$0.m(int,java.nio.IntBuffer):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGL30$$ExternalSyntheticApiModelOutline1 -> g.l:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:void com.badlogic.gdx.backends.android.AndroidGL30$$InternalSyntheticApiModelOutline$1$f9bcb60917dc69eb7225adf4908e56a1db51c63ca29570e306987df4675edf68$0.m(int):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGraphics -> g.w:
    float ppcX -> A
    float ppcY -> B
    float density -> C
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> D
    com.badlogic.gdx.Graphics$BufferFormat bufferFormat -> E
    boolean isContinuous -> F
    int[] value -> G
    java.lang.Object synch -> H
    boolean enforceContinuousRendering -> I
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 view -> a
    int width -> b
    int height -> c
    int safeInsetLeft -> d
    int safeInsetTop -> e
    int safeInsetBottom -> f
    int safeInsetRight -> g
    com.badlogic.gdx.backends.android.AndroidApplicationBase app -> h
    com.badlogic.gdx.graphics.GL20 gl20 -> i
    com.badlogic.gdx.graphics.GL30 gl30 -> j
    javax.microedition.khronos.egl.EGLContext eglContext -> k
    com.badlogic.gdx.graphics.glutils.GLVersion glVersion -> l
    java.lang.String extensions -> m
    long lastFrameTime -> n
    float deltaTime -> o
    long frameStart -> p
    long frameId -> q
    int frames -> r
    int fps -> s
    boolean created -> t
    boolean running -> u
    boolean pause -> v
    boolean resume -> w
    boolean destroy -> x
    float ppiX -> y
    float ppiY -> z
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/c;Lg/d;Lh/d;)V"}
    2:2:void <init>(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/c;Lg/d;Lh/d;Z)V"}
    1:1:void updateSafeAreaInsets():0:0 -> A
    1:1:int getWidth():0:0 -> a
    1:1:boolean checkGL20():0:0 -> b
    1:1:int getHeight():0:0 -> c
    1:1:int getBackBufferHeight():0:0 -> d
    1:1:int getBackBufferWidth():0:0 -> e
    1:1:boolean supportsExtension(java.lang.String):0:0 -> f
    1:1:com.badlogic.gdx.Graphics$DisplayMode getDisplayMode():0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lc/j$b;"}
    1:1:void requestRendering():0:0 -> h
    1:1:float getDeltaTime():0:0 -> i
    1:1:void clearManagedCaches():0:0 -> j
    1:1:com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 createGLSurfaceView(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy):0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/c;Lh/d;)Lh/b;"}
    1:1:void destroy():0:0 -> l
    1:1:int getAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int):0:0 -> m
    1:1:android.opengl.GLSurfaceView$EGLConfigChooser getEglConfigChooser():0:0 -> n
    1:1:android.view.View getView():0:0 -> o
    1:1:void onDrawFrame(javax.microedition.khronos.opengles.GL10):0:0 -> onDrawFrame
    1:1:void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int):0:0 -> onSurfaceChanged
    1:1:void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig):0:0 -> onSurfaceCreated
    1:1:boolean isContinuousRendering():0:0 -> p
    1:1:void logConfig(javax.microedition.khronos.egl.EGLConfig):0:0 -> q
    1:1:void logManagedCachesStatus():0:0 -> r
    1:1:void onPauseGLSurfaceView():0:0 -> s
    1:1:void onResumeGLSurfaceView():0:0 -> t
    1:1:void pause():0:0 -> u
    1:1:void preserveEGLContextOnPause():0:0 -> v
    1:1:void resume():0:0 -> w
    1:1:void setContinuousRendering(boolean):0:0 -> x
    1:1:void setupGL(javax.microedition.khronos.opengles.GL10):0:0 -> y
    1:1:void updatePpi():0:0 -> z
com.badlogic.gdx.backends.android.AndroidGraphics$$ExternalSyntheticApiModelOutline0 -> g.n:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.view.WindowInsets com.badlogic.gdx.backends.android.AndroidGraphics$$InternalSyntheticApiModelOutline$1$7cdcf504b3e93db3bfde1912e3682440b9fc2bf91261ad91ae7fc555763f5b1e$0.m(android.view.View):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGraphics$$ExternalSyntheticApiModelOutline1 -> g.o:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.view.DisplayCutout com.badlogic.gdx.backends.android.AndroidGraphics$$InternalSyntheticApiModelOutline$1$7cdcf504b3e93db3bfde1912e3682440b9fc2bf91261ad91ae7fc555763f5b1e$1.m(android.view.WindowInsets):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGraphics$$ExternalSyntheticApiModelOutline2 -> g.p:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:int com.badlogic.gdx.backends.android.AndroidGraphics$$InternalSyntheticApiModelOutline$1$7cdcf504b3e93db3bfde1912e3682440b9fc2bf91261ad91ae7fc555763f5b1e$2.m(android.view.DisplayCutout):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGraphics$$ExternalSyntheticApiModelOutline3 -> g.q:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:int com.badlogic.gdx.backends.android.AndroidGraphics$$InternalSyntheticApiModelOutline$1$7cdcf504b3e93db3bfde1912e3682440b9fc2bf91261ad91ae7fc555763f5b1e$3.m(android.view.DisplayCutout):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGraphics$$ExternalSyntheticApiModelOutline4 -> g.r:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:int com.badlogic.gdx.backends.android.AndroidGraphics$$InternalSyntheticApiModelOutline$1$7cdcf504b3e93db3bfde1912e3682440b9fc2bf91261ad91ae7fc555763f5b1e$4.m(android.view.DisplayCutout):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGraphics$$ExternalSyntheticApiModelOutline5 -> g.s:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:int com.badlogic.gdx.backends.android.AndroidGraphics$$InternalSyntheticApiModelOutline$1$7cdcf504b3e93db3bfde1912e3682440b9fc2bf91261ad91ae7fc555763f5b1e$5.m(android.view.DisplayCutout):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGraphics$$ExternalSyntheticApiModelOutline6 -> g.t:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.hardware.display.DisplayManager com.badlogic.gdx.backends.android.AndroidGraphics$$InternalSyntheticApiModelOutline$1$d2605d588f1817ca4b17a1785152158a59c39dbecb235f42d81266c1a6519bfc$0.m(java.lang.Object):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGraphics$$ExternalSyntheticApiModelOutline7 -> g.u:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.view.Display com.badlogic.gdx.backends.android.AndroidGraphics$$InternalSyntheticApiModelOutline$1$d2605d588f1817ca4b17a1785152158a59c39dbecb235f42d81266c1a6519bfc$1.m(android.hardware.display.DisplayManager,int):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGraphics$$ExternalSyntheticApiModelOutline8 -> g.v:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:void com.badlogic.gdx.backends.android.AndroidGraphics$$InternalSyntheticApiModelOutline$1$d2605d588f1817ca4b17a1785152158a59c39dbecb235f42d81266c1a6519bfc$2.m(android.view.Display,android.util.DisplayMetrics):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGraphics$1 -> g.w$a:
    com.badlogic.gdx.backends.android.AndroidGraphics this$0 -> d
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidGraphics):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/w;)V"}
    1:1:void run():0:0 -> run
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode -> g.w$b:
    com.badlogic.gdx.backends.android.AndroidGraphics this$0 -> e
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidGraphics,int,int,int,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/w;IIII)V"}
com.badlogic.gdx.backends.android.AndroidHaptics -> g.b0:
    android.os.Vibrator vibrator -> a
    android.media.AudioAttributes audioAttributes -> b
    boolean vibratorSupport -> c
    boolean hapticsSupport -> d
    1:1:void <init>(android.content.Context):0:0 -> <init>
com.badlogic.gdx.backends.android.AndroidHaptics$$ExternalSyntheticApiModelOutline0 -> g.x:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:boolean com.badlogic.gdx.backends.android.AndroidHaptics$$InternalSyntheticApiModelOutline$1$96efbbcc3c82c74532b1ed7977c9b90fbc5e32dae5a082f8ef412aa99bd91b70$0.m(android.os.Vibrator):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidHaptics$$ExternalSyntheticApiModelOutline1 -> g.y:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.media.AudioAttributes$Builder com.badlogic.gdx.backends.android.AndroidHaptics$$InternalSyntheticApiModelOutline$1$96efbbcc3c82c74532b1ed7977c9b90fbc5e32dae5a082f8ef412aa99bd91b70$1.m(android.media.AudioAttributes$Builder,int):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidHaptics$$ExternalSyntheticApiModelOutline2 -> g.z:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.media.AudioAttributes$Builder com.badlogic.gdx.backends.android.AndroidHaptics$$InternalSyntheticApiModelOutline$1$96efbbcc3c82c74532b1ed7977c9b90fbc5e32dae5a082f8ef412aa99bd91b70$2.m(android.media.AudioAttributes$Builder,int):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidHaptics$$ExternalSyntheticApiModelOutline3 -> g.a0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.media.AudioAttributes com.badlogic.gdx.backends.android.AndroidHaptics$$InternalSyntheticApiModelOutline$1$96efbbcc3c82c74532b1ed7977c9b90fbc5e32dae5a082f8ef412aa99bd91b70$3.m(android.media.AudioAttributes$Builder):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidInput -> g.c0:
    void addKeyListener(android.view.View$OnKeyListener) -> d
    void onPause() -> e
    void processEvents() -> f
    void onResume() -> g
    void addGenericMotionListener(android.view.View$OnGenericMotionListener) -> h
    void setKeyboardAvailable(boolean) -> i
com.badlogic.gdx.backends.android.AndroidMouseHandler -> g.d0:
    int deltaX -> a
    int deltaY -> b
    1:1:void <init>():0:0 -> <init>
    1:1:boolean onGenericMotion(android.view.MotionEvent,com.badlogic.gdx.backends.android.DefaultAndroidInput):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Landroid/view/MotionEvent;Lg/n0;)Z"}
    1:1:void postTouchEvent(com.badlogic.gdx.backends.android.DefaultAndroidInput,int,int,int,int,int,long):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n0;IIIIIJ)V"}
com.badlogic.gdx.backends.android.AndroidNet -> g.e0:
    com.badlogic.gdx.backends.android.AndroidApplicationBase app -> a
    com.badlogic.gdx.net.NetJavaImpl netJavaImpl -> b
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/c;Lg/d;)V"}
com.badlogic.gdx.backends.android.AndroidTouchHandler -> g.f0:
    void <init>() -> <init>
    1:1:void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.DefaultAndroidInput):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Landroid/view/MotionEvent;Lg/n0;)V"}
    1:1:void postTouchEvent(com.badlogic.gdx.backends.android.DefaultAndroidInput,int,int,int,int,int,long):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n0;IIIIIJ)V"}
    1:1:boolean supportsMultitouch(android.content.Context):0:0 -> c
    1:1:int toGdxButton(int):0:0 -> d
com.badlogic.gdx.backends.android.AndroidVisibilityListener -> g.g0:
    void <init>() -> <init>
    1:1:void createListener(com.badlogic.gdx.backends.android.AndroidApplicationBase):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/c;)V"}
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1 -> g.g0$a:
    com.badlogic.gdx.backends.android.AndroidApplicationBase val$application -> a
    com.badlogic.gdx.backends.android.AndroidVisibilityListener this$0 -> b
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidVisibilityListener,com.badlogic.gdx.backends.android.AndroidApplicationBase):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/g0;Lg/c;)V"}
    1:1:void onSystemUiVisibilityChange(int):0:0 -> onSystemUiVisibilityChange
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1$1 -> g.g0$a$a:
    com.badlogic.gdx.backends.android.AndroidVisibilityListener$1 this$1 -> d
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidVisibilityListener$1):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/g0$a;)V"}
    1:1:void run():0:0 -> run
com.badlogic.gdx.backends.android.DefaultAndroidAudio -> g.k0:
    android.media.SoundPool soundPool -> a
    android.media.AudioManager manager -> b
    java.util.List musics -> c
    1:1:void <init>(android.content.Context,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Landroid/content/Context;Lg/d;)V"}
    1:1:void resume():0:0 -> a
    1:1:void pause():0:0 -> b
    1:1:void dispose():0:0 -> c
com.badlogic.gdx.backends.android.DefaultAndroidAudio$$ExternalSyntheticApiModelOutline0 -> g.h0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.media.SoundPool$Builder com.badlogic.gdx.backends.android.DefaultAndroidAudio$$InternalSyntheticApiModelOutline$1$548b932707dfeeb7ae6a351347abb6793267a6e24a422e53c23052aea292514b$3.m(android.media.SoundPool$Builder,android.media.AudioAttributes):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.DefaultAndroidAudio$$ExternalSyntheticApiModelOutline1 -> g.i0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.media.SoundPool$Builder com.badlogic.gdx.backends.android.DefaultAndroidAudio$$InternalSyntheticApiModelOutline$1$548b932707dfeeb7ae6a351347abb6793267a6e24a422e53c23052aea292514b$4.m(android.media.SoundPool$Builder,int):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.DefaultAndroidAudio$$ExternalSyntheticApiModelOutline2 -> g.j0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.media.SoundPool com.badlogic.gdx.backends.android.DefaultAndroidAudio$$InternalSyntheticApiModelOutline$1$548b932707dfeeb7ae6a351347abb6793267a6e24a422e53c23052aea292514b$5.m(android.media.SoundPool$Builder):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.DefaultAndroidFiles -> g.l0:
    java.lang.String externalFilesPath -> a
    java.lang.String localpath -> b
    android.content.res.AssetManager assets -> c
    1:1:void <init>(android.content.res.AssetManager,android.content.ContextWrapper,boolean):0:0 -> <init>
    1:1:com.badlogic.gdx.files.FileHandle internal(java.lang.String):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lj/a;"}
    1:1:java.lang.String getLocalStoragePath():0:0 -> b
    1:1:java.lang.String getExternalStoragePath():0:0 -> c
    1:1:java.lang.String initExternalFilesPath(android.content.ContextWrapper):0:0 -> d
com.badlogic.gdx.backends.android.DefaultAndroidInput -> g.n0:
    com.badlogic.gdx.Application app -> A
    android.content.Context context -> B
    com.badlogic.gdx.backends.android.AndroidTouchHandler touchHandler -> C
    int sleepTime -> D
    com.badlogic.gdx.backends.android.AndroidHaptics haptics -> E
    boolean compassAvailable -> F
    boolean rotationVectorAvailable -> G
    boolean keyboardAvailable -> H
    float[] magneticFieldValues -> I
    float[] rotationVectorValues -> J
    float azimuth -> K
    float pitch -> L
    float roll -> M
    boolean justTouched -> N
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> O
    com.badlogic.gdx.Input$Orientation nativeOrientation -> P
    long currentEventTimeStamp -> Q
    android.hardware.SensorEventListener accelerometerListener -> R
    android.hardware.SensorEventListener gyroscopeListener -> S
    android.hardware.SensorEventListener compassListener -> T
    android.hardware.SensorEventListener rotationVectorListener -> U
    java.util.ArrayList genericMotionListeners -> V
    com.badlogic.gdx.backends.android.AndroidMouseHandler mouseHandler -> W
    boolean requestFocus -> X
    float[] R -> Y
    float[] orientation -> Z
    com.badlogic.gdx.utils.Pool usedKeyEvents -> f
    com.badlogic.gdx.utils.Pool usedTouchEvents -> g
    java.util.ArrayList keyListeners -> h
    java.util.ArrayList keyEvents -> i
    java.util.ArrayList touchEvents -> j
    int[] touchX -> k
    int[] touchY -> l
    int[] deltaX -> m
    int[] deltaY -> n
    boolean[] touched -> o
    int[] button -> p
    int[] realId -> q
    float[] pressure -> r
    boolean hasMultitouch -> s
    boolean[] justPressedButtons -> t
    android.hardware.SensorManager manager -> u
    boolean accelerometerAvailable -> v
    float[] accelerometerValues -> w
    boolean gyroscopeAvailable -> x
    float[] gyroscopeValues -> y
    android.os.Handler handle -> z
    1:1:void <init>(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;Landroid/content/Context;Ljava/lang/Object;Lg/d;)V"}
    1:1:void addKeyListener(android.view.View$OnKeyListener):0:0 -> d
    1:1:void onPause():0:0 -> e
    1:1:void processEvents():0:0 -> f
    1:1:void onResume():0:0 -> g
    1:1:void addGenericMotionListener(android.view.View$OnGenericMotionListener):0:0 -> h
    1:1:void setKeyboardAvailable(boolean):0:0 -> i
    1:1:int getAndroidInputType(com.badlogic.gdx.Input$OnscreenKeyboardType):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/k$a;)I"}
    1:1:int getFreePointerIndex():0:0 -> k
    1:1:int getRotation():0:0 -> l
    1:1:boolean isCursorCatched():0:0 -> m
    1:1:int lookUpPointerIndex(int):0:0 -> n
    1:1:void registerSensorListeners():0:0 -> o
    1:1:boolean onGenericMotion(android.view.View,android.view.MotionEvent):0:0 -> onGenericMotion
    1:1:boolean onKey(android.view.View,int,android.view.KeyEvent):0:0 -> onKey
    1:1:boolean onTouch(android.view.View,android.view.MotionEvent):0:0 -> onTouch
    1:1:float[] resize(float[]):0:0 -> p
    1:1:int[] resize(int[]):0:0 -> q
    1:1:boolean[] resize(boolean[]):0:0 -> r
    1:1:void unregisterSensorListeners():0:0 -> s
com.badlogic.gdx.backends.android.DefaultAndroidInput$$ExternalSyntheticApiModelOutline0 -> g.m0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:boolean com.badlogic.gdx.backends.android.DefaultAndroidInput$$InternalSyntheticApiModelOutline$1$5d33fa66ab41b6a842ffc1740bb8e3964c1adfafdcf97136dde28c68295ffeaa$0.m(android.view.View):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.DefaultAndroidInput$1 -> g.n0$a:
    com.badlogic.gdx.backends.android.DefaultAndroidInput this$0 -> d
    1:1:void <init>(com.badlogic.gdx.backends.android.DefaultAndroidInput,int,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n0;II)V"}
    1:1:java.lang.Object newObject():0:0 -> d
    1:1:com.badlogic.gdx.backends.android.DefaultAndroidInput$KeyEvent newObject():0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lg/n0$d;"}
com.badlogic.gdx.backends.android.DefaultAndroidInput$2 -> g.n0$b:
    com.badlogic.gdx.backends.android.DefaultAndroidInput this$0 -> d
    1:1:void <init>(com.badlogic.gdx.backends.android.DefaultAndroidInput,int,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n0;II)V"}
    1:1:java.lang.Object newObject():0:0 -> d
    1:1:com.badlogic.gdx.backends.android.DefaultAndroidInput$TouchEvent newObject():0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lg/n0$f;"}
com.badlogic.gdx.backends.android.DefaultAndroidInput$6 -> g.n0$c:
    int[] $SwitchMap$com$badlogic$gdx$Input$OnscreenKeyboardType -> a
    1:1:void <clinit>():0:0 -> <clinit>
com.badlogic.gdx.backends.android.DefaultAndroidInput$KeyEvent -> g.n0$d:
    long timeStamp -> a
    int type -> b
    int keyCode -> c
    char keyChar -> d
    void <init>() -> <init>
com.badlogic.gdx.backends.android.DefaultAndroidInput$SensorListener -> g.n0$e:
    com.badlogic.gdx.backends.android.DefaultAndroidInput this$0 -> a
    1:1:void <init>(com.badlogic.gdx.backends.android.DefaultAndroidInput):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n0;)V"}
    1:1:void onAccuracyChanged(android.hardware.Sensor,int):0:0 -> onAccuracyChanged
    1:1:void onSensorChanged(android.hardware.SensorEvent):0:0 -> onSensorChanged
com.badlogic.gdx.backends.android.DefaultAndroidInput$TouchEvent -> g.n0$f:
    long timeStamp -> a
    int type -> b
    int x -> c
    int y -> d
    int scrollAmountX -> e
    int scrollAmountY -> f
    int button -> g
    int pointer -> h
    void <init>() -> <init>
com.badlogic.gdx.backends.android.GdxNativeLoader -> g.o0:
    void load() -> a
com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy -> h.a:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(II)Lh/d$a;"}
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 -> h.b:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> a
    com.badlogic.gdx.Input$OnscreenKeyboardType onscreenKeyboardType -> b
    java.lang.String TAG -> c
    int targetGLESVersion -> d
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(android.content.Context,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Landroid/content/Context;Lh/d;I)V"}
    1:1:boolean checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10):0:0 -> a
    1:1:void init(boolean,int,int):0:0 -> b
    1:1:android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo):0:0 -> onCreateInputConnection
    1:1:void onDetachedFromWindow():0:0 -> onDetachedFromWindow
    1:1:void onMeasure(int,int):0:0 -> onMeasure
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1 -> h.b$a:
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 this$0 -> a
    1:1:void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20,android.view.View,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lh/b;Landroid/view/View;Z)V"}
    1:1:void sendDownUpKeyEventForBackwardCompatibility(int):0:0 -> a
    1:1:boolean deleteSurroundingText(int,int):0:0 -> deleteSurroundingText
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser -> h.b$b:
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int[] mValue -> g
    int[] s_configAttribs2 -> h
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(int,int,int,int,int,int):0:0 -> <init>
    1:1:javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]):0:0 -> a
    1:1:int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int):0:0 -> b
    1:1:javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay):0:0 -> chooseConfig
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory -> h.b$c:
    int EGL_CONTEXT_CLIENT_VERSION -> a
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig):0:0 -> createContext
    1:1:void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext):0:0 -> destroyContext
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser -> h.c:
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int mNumSamples -> g
    int[] mConfigAttribs -> h
    int[] mValue -> i
    1:1:void <init>(int,int,int,int,int,int,int):0:0 -> <init>
    1:1:javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]):0:0 -> a
    1:1:int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int):0:0 -> b
    1:1:javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay):0:0 -> chooseConfig
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy -> h.d:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(II)Lh/d$a;"}
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension -> h.d$a:
    int width -> a
    int height -> b
    1:1:void <init>(int,int):0:0 -> <init>
com.badlogic.gdx.controllers.AbstractControllerManager -> i.a:
    com.badlogic.gdx.utils.Array controllers -> a
    com.badlogic.gdx.controllers.Controller currentController -> b
    1:1:void <init>():0:0 -> <init>
    1:1:com.badlogic.gdx.controllers.Controller access$000(com.badlogic.gdx.controllers.AbstractControllerManager):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/a;)Li/b;"}
    1:1:com.badlogic.gdx.controllers.Controller access$002(com.badlogic.gdx.controllers.AbstractControllerManager,com.badlogic.gdx.controllers.Controller):0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/a;Li/b;)Li/b;"}
com.badlogic.gdx.controllers.AbstractControllerManager$ManageCurrentControllerListener -> i.a$a:
    com.badlogic.gdx.controllers.AbstractControllerManager this$0 -> a
    1:1:void <init>(com.badlogic.gdx.controllers.AbstractControllerManager):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/a;)V"}
    1:1:boolean buttonUp(com.badlogic.gdx.controllers.Controller,int):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/b;I)Z"}
    1:1:boolean buttonDown(com.badlogic.gdx.controllers.Controller,int):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/b;I)Z"}
    1:1:boolean axisMoved(com.badlogic.gdx.controllers.Controller,int,float):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/b;IF)Z"}
    1:1:void disconnected(com.badlogic.gdx.controllers.Controller):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/b;)V"}
    1:1:void connected(com.badlogic.gdx.controllers.Controller):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/b;)V"}
com.badlogic.gdx.controllers.Controller -> i.b:
com.badlogic.gdx.controllers.ControllerAdapter -> i.c:
    void <init>() -> <init>
com.badlogic.gdx.controllers.ControllerListener -> i.d:
    boolean buttonUp(com.badlogic.gdx.controllers.Controller,int) -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/b;I)Z"}
    boolean buttonDown(com.badlogic.gdx.controllers.Controller,int) -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/b;I)Z"}
    boolean axisMoved(com.badlogic.gdx.controllers.Controller,int,float) -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/b;IF)Z"}
    void disconnected(com.badlogic.gdx.controllers.Controller) -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/b;)V"}
    void connected(com.badlogic.gdx.controllers.Controller) -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/b;)V"}
com.badlogic.gdx.controllers.android.AndroidController -> com.badlogic.gdx.controllers.android.a:
    int deviceId -> a
    java.lang.String name -> b
    com.badlogic.gdx.utils.IntIntMap buttons -> c
    float[] axes -> d
    int[] axesIds -> e
    float povX -> f
    float povY -> g
    boolean povAxis -> h
    com.badlogic.gdx.utils.Array listeners -> i
    java.lang.String uuid -> j
    boolean connected -> k
    1:1:float getAxis(int):0:0 -> a
    1:1:boolean getButton(int):0:0 -> b
    1:1:com.badlogic.gdx.utils.Array getListeners():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/a;"}
    1:1:java.lang.String getName():0:0 -> d
    1:1:boolean hasPovAxis():0:0 -> e
com.badlogic.gdx.controllers.android.AndroidControllerEvent -> com.badlogic.gdx.controllers.android.b:
    com.badlogic.gdx.controllers.android.AndroidController controller -> a
    int type -> b
    int code -> c
    float axisValue -> d
com.badlogic.gdx.controllers.android.AndroidControllers -> com.badlogic.gdx.controllers.android.AndroidControllers:
    com.badlogic.gdx.utils.IntMap controllerMap -> c
    com.badlogic.gdx.utils.Array listeners -> d
    com.badlogic.gdx.utils.Array eventQueue -> e
    com.badlogic.gdx.utils.Pool eventPool -> f
    boolean ignoreNoGamepadButtons -> g
    1:1:void resume():0:0 -> a
    1:1:void pause():0:0 -> b
    1:1:void dispose():0:0 -> c
    1:1:com.badlogic.gdx.utils.Array access$000(com.badlogic.gdx.controllers.android.AndroidControllers):0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/controllers/android/AndroidControllers;)Lw/a;"}
    1:1:com.badlogic.gdx.utils.Array access$100(com.badlogic.gdx.controllers.android.AndroidControllers):0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/controllers/android/AndroidControllers;)Lw/a;"}
    1:1:com.badlogic.gdx.utils.Array access$200(com.badlogic.gdx.controllers.android.AndroidControllers):0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/controllers/android/AndroidControllers;)Lw/a;"}
    1:1:com.badlogic.gdx.utils.Array access$300(com.badlogic.gdx.controllers.android.AndroidControllers):0:0 -> o
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/controllers/android/AndroidControllers;)Lw/a;"}
    1:1:com.badlogic.gdx.utils.Pool access$400(com.badlogic.gdx.controllers.android.AndroidControllers):0:0 -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/controllers/android/AndroidControllers;)Lw/o;"}
    1:1:void addController(int,boolean):0:0 -> q
    1:1:void gatherControllers(boolean):0:0 -> r
    1:1:boolean isController(android.view.InputDevice):0:0 -> s
    1:1:void removeController(int):0:0 -> t
    1:1:void setupEventQueue():0:0 -> u
com.badlogic.gdx.controllers.android.AndroidControllers$1 -> com.badlogic.gdx.controllers.android.AndroidControllers$a:
    com.badlogic.gdx.controllers.android.AndroidControllers this$0 -> d
    1:1:java.lang.Object newObject():0:0 -> d
    1:1:com.badlogic.gdx.controllers.android.AndroidControllerEvent newObject():0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lcom/badlogic/gdx/controllers/android/b;"}
com.badlogic.gdx.controllers.android.AndroidControllers$2 -> com.badlogic.gdx.controllers.android.AndroidControllers$b:
    com.badlogic.gdx.controllers.android.AndroidControllers this$0 -> d
com.badlogic.gdx.controllers.android.ControllerLifeCycleListener -> com.badlogic.gdx.controllers.android.c:
    android.hardware.input.InputManager inputManager -> a
    com.badlogic.gdx.controllers.android.AndroidControllers controllers -> b
    1:1:void resume():0:0 -> a
    1:1:void pause():0:0 -> b
    1:1:void dispose():0:0 -> c
com.badlogic.gdx.files.FileHandle -> j.a:
    java.io.File file -> a
    com.badlogic.gdx.Files$FileType type -> b
    1:1:void <init>(java.io.File,com.badlogic.gdx.Files$FileType):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/io/File;Lc/g$a;)V"}
    2:2:void <init>(java.lang.String,com.badlogic.gdx.Files$FileType):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;Lc/g$a;)V"}
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lj/a;"}
    1:1:int estimateLength():0:0 -> b
    1:1:java.lang.String extension():0:0 -> c
    1:1:java.io.File file():0:0 -> d
    1:1:long length():0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:java.lang.String name():0:0 -> f
    com.badlogic.gdx.files.FileHandle parent() -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lj/a;"}
    1:1:java.lang.String path():0:0 -> h
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.io.InputStream read():0:0 -> i
    1:1:byte[] readBytes():0:0 -> j
    1:1:java.io.Reader reader(java.lang.String):0:0 -> k
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.graphics.Camera -> k.a:
    com.badlogic.gdx.math.Vector3 position -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 up -> c
    com.badlogic.gdx.math.Matrix4 projection -> d
    com.badlogic.gdx.math.Matrix4 view -> e
    com.badlogic.gdx.math.Matrix4 combined -> f
    com.badlogic.gdx.math.Matrix4 invProjectionView -> g
    float near -> h
    float far -> i
    float viewportWidth -> j
    float viewportHeight -> k
    com.badlogic.gdx.math.Frustum frustum -> l
    com.badlogic.gdx.math.Vector3 tmpVec -> m
    com.badlogic.gdx.math.collision.Ray ray -> n
    1:1:void <init>():0:0 -> <init>
    void update() -> a
com.badlogic.gdx.graphics.Color -> k.b:
    com.badlogic.gdx.graphics.Color ORANGE -> A
    com.badlogic.gdx.graphics.Color BROWN -> B
    com.badlogic.gdx.graphics.Color TAN -> C
    com.badlogic.gdx.graphics.Color FIREBRICK -> D
    com.badlogic.gdx.graphics.Color RED -> E
    com.badlogic.gdx.graphics.Color SCARLET -> F
    com.badlogic.gdx.graphics.Color CORAL -> G
    com.badlogic.gdx.graphics.Color SALMON -> H
    com.badlogic.gdx.graphics.Color PINK -> I
    com.badlogic.gdx.graphics.Color MAGENTA -> J
    com.badlogic.gdx.graphics.Color PURPLE -> K
    com.badlogic.gdx.graphics.Color VIOLET -> L
    com.badlogic.gdx.graphics.Color MAROON -> M
    float r -> a
    float g -> b
    float b -> c
    float a -> d
    com.badlogic.gdx.graphics.Color WHITE -> e
    com.badlogic.gdx.graphics.Color LIGHT_GRAY -> f
    com.badlogic.gdx.graphics.Color GRAY -> g
    com.badlogic.gdx.graphics.Color DARK_GRAY -> h
    com.badlogic.gdx.graphics.Color BLACK -> i
    float WHITE_FLOAT_BITS -> j
    com.badlogic.gdx.graphics.Color CLEAR -> k
    com.badlogic.gdx.graphics.Color BLUE -> l
    com.badlogic.gdx.graphics.Color NAVY -> m
    com.badlogic.gdx.graphics.Color ROYAL -> n
    com.badlogic.gdx.graphics.Color SLATE -> o
    com.badlogic.gdx.graphics.Color SKY -> p
    com.badlogic.gdx.graphics.Color CYAN -> q
    com.badlogic.gdx.graphics.Color TEAL -> r
    com.badlogic.gdx.graphics.Color GREEN -> s
    com.badlogic.gdx.graphics.Color CHARTREUSE -> t
    com.badlogic.gdx.graphics.Color LIME -> u
    com.badlogic.gdx.graphics.Color FOREST -> v
    com.badlogic.gdx.graphics.Color OLIVE -> w
    com.badlogic.gdx.graphics.Color YELLOW -> x
    com.badlogic.gdx.graphics.Color GOLD -> y
    com.badlogic.gdx.graphics.Color GOLDENROD -> z
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:void <init>(float,float,float,float):0:0 -> <init>
    2:2:void <init>(int):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.graphics.Color):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/b;)V"}
    1:1:com.badlogic.gdx.graphics.Color clamp():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/b;"}
    1:1:com.badlogic.gdx.graphics.Color cpy():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/b;"}
    1:1:int rgba8888(float,float,float,float):0:0 -> c
    1:1:void rgba8888ToColor(com.badlogic.gdx.graphics.Color,int):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/b;I)V"}
    1:1:com.badlogic.gdx.graphics.Color set(com.badlogic.gdx.graphics.Color):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/b;)Lk/b;"}
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:float toFloatBits():0:0 -> f
    1:1:float toFloatBits(float,float,float,float):0:0 -> g
    1:1:int toIntBits():0:0 -> h
    1:1:int hashCode():0:0 -> hashCode
    1:1:com.badlogic.gdx.graphics.Color valueOf(java.lang.String):0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lk/b;"}
    1:1:com.badlogic.gdx.graphics.Color valueOf(java.lang.String,com.badlogic.gdx.graphics.Color):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;Lk/b;)Lk/b;"}
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.graphics.Cubemap -> k.c:
    java.util.Map managedCubemaps -> i
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:java.lang.String getManagedStatus():0:0 -> A
    1:1:void invalidateAllCubemaps(com.badlogic.gdx.Application):0:0 -> B
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;)V"}
    1:1:void clearAllCubemaps(com.badlogic.gdx.Application):0:0 -> z
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;)V"}
com.badlogic.gdx.graphics.GL20 -> k.d:
    void glClear(int) -> A
    void glUniform1i(int,int) -> B
    void glTexParameteri(int,int,int) -> C
    void glBindBuffer(int,int) -> D
    void glBufferData(int,int,java.nio.Buffer,int) -> F
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> G
    int glGetUniformLocation(int,java.lang.String) -> H
    void glDisable(int) -> I
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> J
    int glGetAttribLocation(int,java.lang.String) -> K
    void glPixelStorei(int,int) -> L
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> M
    void glDepthMask(boolean) -> N
    void glDisableVertexAttribArray(int) -> O
    void glClearColor(float,float,float,float) -> P
    int glCreateShader(int) -> Q
    void glGetIntegerv(int,java.nio.IntBuffer) -> S
    void glBindTexture(int,int) -> T
    void glCompileShader(int) -> U
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> V
    void glEnable(int) -> a
    int glGenBuffer() -> b
    void glDrawArrays(int,int,int) -> c
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> d
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> e
    void glGetFloatv(int,java.nio.FloatBuffer) -> f
    void glViewport(int,int,int,int) -> g
    void glShaderSource(int,java.lang.String) -> h
    void glAttachShader(int,int) -> i
    void glTexParameterf(int,int,float) -> j
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> k
    void glUseProgram(int) -> l
    void glGenerateMipmap(int) -> m
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> n
    void glLinkProgram(int) -> o
    void glBufferSubData(int,int,int,java.nio.Buffer) -> p
    java.lang.String glGetShaderInfoLog(int) -> q
    void glDrawElements(int,int,int,java.nio.Buffer) -> r
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> s
    int glGenTexture() -> t
    int glCreateProgram() -> u
    void glBlendFuncSeparate(int,int,int,int) -> v
    void glDrawElements(int,int,int,int) -> w
    java.lang.String glGetProgramInfoLog(int) -> x
    void glEnableVertexAttribArray(int) -> y
    java.lang.String glGetString(int) -> z
com.badlogic.gdx.graphics.GL30 -> k.e:
    void glGenVertexArrays(int,java.nio.IntBuffer) -> E
    void glBindVertexArray(int) -> R
com.badlogic.gdx.graphics.GLTexture -> k.f:
    int glTarget -> a
    int glHandle -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> e
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> f
    float anisotropicFilterLevel -> g
    float maxAnisotropicFilterLevel -> h
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(int,int):0:0 -> <init>
    1:1:float getMaxAnisotropicFilterLevel():0:0 -> m
    1:1:void bind():0:0 -> q
    1:1:void setFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter):0:0 -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/k$a;Lk/k$a;)V"}
    1:1:float unsafeSetAnisotropicFilter(float,boolean):0:0 -> u
    1:1:void unsafeSetFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean):0:0 -> v
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/k$a;Lk/k$a;Z)V"}
    1:1:void unsafeSetWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap,boolean):0:0 -> w
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/k$b;Lk/k$b;Z)V"}
    1:1:void uploadImageData(int,com.badlogic.gdx.graphics.TextureData):0:0 -> x
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILk/m;)V"}
    1:1:void uploadImageData(int,com.badlogic.gdx.graphics.TextureData,int):0:0 -> y
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILk/m;I)V"}
com.badlogic.gdx.graphics.Mesh -> k.g:
    com.badlogic.gdx.graphics.glutils.VertexData vertices -> a
    com.badlogic.gdx.graphics.glutils.IndexData indices -> b
    boolean autoBind -> c
    boolean isVertexArray -> d
    boolean isInstanced -> e
    com.badlogic.gdx.math.Vector3 tmpV -> f
    java.util.Map meshes -> g
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(com.badlogic.gdx.graphics.Mesh$VertexDataType,boolean,int,int,com.badlogic.gdx.graphics.VertexAttributes):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/g$b;ZIILk/o;)V"}
    2:2:void <init>(com.badlogic.gdx.graphics.Mesh$VertexDataType,boolean,int,int,com.badlogic.gdx.graphics.VertexAttribute[]):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/g$b;ZII[Lk/n;)V"}
    1:1:void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int,boolean):0:0 -> A
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;IIIZ)V"}
    1:1:com.badlogic.gdx.graphics.Mesh setIndices(short[]):0:0 -> B
      # {"id":"com.android.tools.r8.residualsignature","signature":"([S)Lk/g;"}
    1:1:com.badlogic.gdx.graphics.Mesh setVertices(float[],int,int):0:0 -> C
      # {"id":"com.android.tools.r8.residualsignature","signature":"([FII)Lk/g;"}
    1:1:void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram):0:0 -> D
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;)V"}
    1:1:void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[],int[]):0:0 -> E
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;[I[I)V"}
    1:1:void addManagedMesh(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Mesh):0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;Lk/g;)V"}
    1:1:void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram):0:0 -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;)V"}
    1:1:void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[],int[]):0:0 -> u
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;[I[I)V"}
    1:1:void clearAllMeshes(com.badlogic.gdx.Application):0:0 -> v
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;)V"}
    1:1:java.nio.ShortBuffer getIndicesBuffer(boolean):0:0 -> w
    1:1:java.lang.String getManagedStatus():0:0 -> x
    1:1:void invalidateAllMeshes(com.badlogic.gdx.Application):0:0 -> y
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;)V"}
    1:1:void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int):0:0 -> z
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;III)V"}
com.badlogic.gdx.graphics.Mesh$1 -> k.g$a:
    int[] $SwitchMap$com$badlogic$gdx$graphics$Mesh$VertexDataType -> a
    1:1:void <clinit>():0:0 -> <clinit>
com.badlogic.gdx.graphics.Mesh$VertexDataType -> k.g$b:
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexArray -> d
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObject -> e
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectSubData -> f
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectWithVAO -> g
    com.badlogic.gdx.graphics.Mesh$VertexDataType[] $VALUES -> h
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.graphics.Mesh$VertexDataType valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lk/g$b;"}
    1:1:com.badlogic.gdx.graphics.Mesh$VertexDataType[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lk/g$b;"}
com.badlogic.gdx.graphics.OrthographicCamera -> k.h:
    float zoom -> o
    com.badlogic.gdx.math.Vector3 tmp -> p
    1:1:void <init>():0:0 -> <init>
    1:1:void update():0:0 -> a
    1:1:void update(boolean):0:0 -> b
com.badlogic.gdx.graphics.Pixmap -> k.i:
    com.badlogic.gdx.graphics.Pixmap$Blending blending -> a
    com.badlogic.gdx.graphics.Pixmap$Filter filter -> b
    com.badlogic.gdx.graphics.g2d.Gdx2DPixmap pixmap -> c
    int color -> d
    boolean disposed -> e
    1:1:void <init>(int,int,com.badlogic.gdx.graphics.Pixmap$Format):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(IILk/i$c;)V"}
    2:2:void <init>(com.badlogic.gdx.files.FileHandle):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lj/a;)V"}
    1:1:java.nio.ByteBuffer getPixels():0:0 -> A
    1:1:int getWidth():0:0 -> B
    1:1:void setBlending(com.badlogic.gdx.graphics.Pixmap$Blending):0:0 -> C
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/i$a;)V"}
    1:1:void setColor(float,float,float,float):0:0 -> D
    1:1:void dispose():0:0 -> c
    1:1:void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int):0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/i;IIIIII)V"}
    1:1:void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int,int,int):0:0 -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/i;IIIIIIII)V"}
    1:1:void fill():0:0 -> u
    1:1:com.badlogic.gdx.graphics.Pixmap$Format getFormat():0:0 -> v
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/i$c;"}
    1:1:int getGLFormat():0:0 -> w
    1:1:int getGLInternalFormat():0:0 -> x
    1:1:int getGLType():0:0 -> y
    1:1:int getHeight():0:0 -> z
com.badlogic.gdx.graphics.Pixmap$Blending -> k.i$a:
    com.badlogic.gdx.graphics.Pixmap$Blending None -> d
    com.badlogic.gdx.graphics.Pixmap$Blending SourceOver -> e
    com.badlogic.gdx.graphics.Pixmap$Blending[] $VALUES -> f
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.graphics.Pixmap$Blending valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lk/i$a;"}
    1:1:com.badlogic.gdx.graphics.Pixmap$Blending[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lk/i$a;"}
com.badlogic.gdx.graphics.Pixmap$Filter -> k.i$b:
    com.badlogic.gdx.graphics.Pixmap$Filter NearestNeighbour -> d
    com.badlogic.gdx.graphics.Pixmap$Filter BiLinear -> e
    com.badlogic.gdx.graphics.Pixmap$Filter[] $VALUES -> f
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.graphics.Pixmap$Filter valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lk/i$b;"}
    1:1:com.badlogic.gdx.graphics.Pixmap$Filter[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lk/i$b;"}
com.badlogic.gdx.graphics.Pixmap$Format -> k.i$c:
    com.badlogic.gdx.graphics.Pixmap$Format Alpha -> d
    com.badlogic.gdx.graphics.Pixmap$Format Intensity -> e
    com.badlogic.gdx.graphics.Pixmap$Format LuminanceAlpha -> f
    com.badlogic.gdx.graphics.Pixmap$Format RGB565 -> g
    com.badlogic.gdx.graphics.Pixmap$Format RGBA4444 -> h
    com.badlogic.gdx.graphics.Pixmap$Format RGB888 -> i
    com.badlogic.gdx.graphics.Pixmap$Format RGBA8888 -> j
    com.badlogic.gdx.graphics.Pixmap$Format[] $VALUES -> k
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.graphics.Pixmap$Format fromGdx2DPixmapFormat(int):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(I)Lk/i$c;"}
    1:1:int toGdx2DPixmapFormat(com.badlogic.gdx.graphics.Pixmap$Format):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/i$c;)I"}
    1:1:com.badlogic.gdx.graphics.Pixmap$Format valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lk/i$c;"}
    1:1:com.badlogic.gdx.graphics.Pixmap$Format[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lk/i$c;"}
com.badlogic.gdx.graphics.PixmapIO -> k.j:
    1:1:com.badlogic.gdx.graphics.Pixmap readCIM(com.badlogic.gdx.files.FileHandle):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lj/a;)Lk/i;"}
com.badlogic.gdx.graphics.PixmapIO$CIM -> k.j$a:
    byte[] writeBuffer -> a
    byte[] readBuffer -> b
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:com.badlogic.gdx.graphics.Pixmap read(com.badlogic.gdx.files.FileHandle):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lj/a;)Lk/i;"}
com.badlogic.gdx.graphics.Texture -> k.k:
    com.badlogic.gdx.graphics.TextureData data -> i
    java.util.Map managedTextures -> j
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(int,int,com.badlogic.gdx.graphics.TextureData):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(IILk/m;)V"}
    2:2:void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap$Format,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lj/a;Lk/i$c;Z)V"}
    3:3:void <init>(com.badlogic.gdx.files.FileHandle,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lj/a;Z)V"}
    4:4:void <init>(com.badlogic.gdx.graphics.TextureData):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/m;)V"}
    1:1:void clearAllTextures(com.badlogic.gdx.Application):0:0 -> A
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;)V"}
    1:1:int getHeight():0:0 -> B
    1:1:java.lang.String getManagedStatus():0:0 -> C
    1:1:int getWidth():0:0 -> D
    1:1:void invalidateAllTextures(com.badlogic.gdx.Application):0:0 -> E
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;)V"}
    1:1:boolean isManaged():0:0 -> F
    1:1:void load(com.badlogic.gdx.graphics.TextureData):0:0 -> G
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/m;)V"}
    1:1:void reload():0:0 -> H
    1:1:java.lang.String toString():0:0 -> toString
    1:1:void addManagedTexture(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Texture):0:0 -> z
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;Lk/k;)V"}
com.badlogic.gdx.graphics.Texture$TextureFilter -> k.k$a:
    int glEnum -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter Nearest -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter Linear -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMap -> g
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestNearest -> h
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearNearest -> i
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestLinear -> j
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearLinear -> k
    com.badlogic.gdx.graphics.Texture$TextureFilter[] $VALUES -> l
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int,int):0:0 -> <init>
    1:1:int getGLEnum():0:0 -> a
    1:1:com.badlogic.gdx.graphics.Texture$TextureFilter valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lk/k$a;"}
    1:1:com.badlogic.gdx.graphics.Texture$TextureFilter[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lk/k$a;"}
com.badlogic.gdx.graphics.Texture$TextureWrap -> k.k$b:
    int glEnum -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap MirroredRepeat -> e
    com.badlogic.gdx.graphics.Texture$TextureWrap ClampToEdge -> f
    com.badlogic.gdx.graphics.Texture$TextureWrap Repeat -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap[] $VALUES -> h
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int,int):0:0 -> <init>
    1:1:int getGLEnum():0:0 -> a
    1:1:com.badlogic.gdx.graphics.Texture$TextureWrap valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lk/k$b;"}
    1:1:com.badlogic.gdx.graphics.Texture$TextureWrap[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lk/k$b;"}
com.badlogic.gdx.graphics.TextureArray -> k.l:
    java.util.Map managedTextureArrays -> i
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void invalidateAllTextureArrays(com.badlogic.gdx.Application):0:0 -> A
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;)V"}
    1:1:void clearAllTextureArrays(com.badlogic.gdx.Application):0:0 -> z
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;)V"}
com.badlogic.gdx.graphics.TextureData -> k.m:
    int getWidth() -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/m$b;"}
    int getHeight() -> c
    void prepare() -> d
    void consumeCustomData(int) -> e
    boolean disposePixmap() -> f
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/i;"}
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/i$c;"}
    boolean isManaged() -> i
    boolean useMipMaps() -> j
    boolean isPrepared() -> k
com.badlogic.gdx.graphics.TextureData$Factory -> k.m$a:
    1:1:com.badlogic.gdx.graphics.TextureData loadFromFile(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap$Format,boolean):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lj/a;Lk/i$c;Z)Lk/m;"}
com.badlogic.gdx.graphics.TextureData$TextureDataType -> k.m$b:
    com.badlogic.gdx.graphics.TextureData$TextureDataType Pixmap -> d
    com.badlogic.gdx.graphics.TextureData$TextureDataType Custom -> e
    com.badlogic.gdx.graphics.TextureData$TextureDataType[] $VALUES -> f
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.graphics.TextureData$TextureDataType valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lk/m$b;"}
    1:1:com.badlogic.gdx.graphics.TextureData$TextureDataType[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lk/m$b;"}
com.badlogic.gdx.graphics.VertexAttribute -> k.n:
    int usage -> a
    int numComponents -> b
    boolean normalized -> c
    int type -> d
    int offset -> e
    java.lang.String alias -> f
    int unit -> g
    int usageIndex -> h
    1:1:void <init>(int,int,int,boolean,java.lang.String,int):0:0 -> <init>
    2:2:void <init>(int,int,java.lang.String):0:0 -> <init>
    3:3:void <init>(int,int,java.lang.String,int):0:0 -> <init>
    1:1:boolean equals(com.badlogic.gdx.graphics.VertexAttribute):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/n;)Z"}
    1:1:int getKey():0:0 -> b
    1:1:int getSizeInBytes():0:0 -> c
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
com.badlogic.gdx.graphics.VertexAttributes -> k.o:
    com.badlogic.gdx.graphics.VertexAttribute[] attributes -> d
    int vertexSize -> e
    long mask -> f
    int boneWeightUnits -> g
    int textureCoordinates -> h
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable iterable -> i
    1:1:void <init>(com.badlogic.gdx.graphics.VertexAttribute[]):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"([Lk/n;)V"}
    1:1:int calculateOffsets():0:0 -> a
    1:1:int compareTo(com.badlogic.gdx.graphics.VertexAttributes):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/o;)I"}
    1:1:com.badlogic.gdx.graphics.VertexAttribute get(int):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(I)Lk/n;"}
    1:1:int compareTo(java.lang.Object):0:0 -> compareTo
    1:1:long getMask():0:0 -> d
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:int size():0:0 -> size
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable -> k.o$a:
    java.lang.Object[] array -> d
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator1 -> e
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator2 -> f
    1:1:void <init>(java.lang.Object[]):0:0 -> <init>
    1:1:java.util.Iterator iterator():0:0 -> iterator
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator -> k.o$b:
    java.lang.Object[] array -> d
    int index -> e
    boolean valid -> f
    1:1:void <init>(java.lang.Object[]):0:0 -> <init>
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.graphics.g2d.Batch -> l.a:
    void end() -> e
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/k;[FII)V"}
    com.badlogic.gdx.graphics.Color getColor() -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/b;"}
    void begin() -> p
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> r
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap -> com.badlogic.gdx.graphics.g2d.Gdx2DPixmap:
    long basePtr -> a
    int width -> b
    int height -> c
    int format -> d
    java.nio.ByteBuffer pixelPtr -> e
    long[] nativeData -> f
    1:1:void <init>(int,int,int):0:0 -> <init>
    2:2:void <init>(byte[],int,int,int):0:0 -> <init>
    1:1:int getGLType():0:0 -> A
    1:1:int getHeight():0:0 -> B
    1:1:java.nio.ByteBuffer getPixels():0:0 -> C
    1:1:int getWidth():0:0 -> D
    1:1:void setBlend(int):0:0 -> E
    1:1:int toGlFormat(int):0:0 -> F
    1:1:int toGlType(int):0:0 -> G
    1:1:void dispose():0:0 -> c
    1:1:void clear(int):0:0 -> m
    1:1:void convert(int):0:0 -> t
    1:1:void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int):0:0 -> u
    1:1:void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int,int,int):0:0 -> v
    1:1:int getFormat():0:0 -> w
    1:1:java.lang.String getFormatString(int):0:0 -> x
    1:1:int getGLFormat():0:0 -> y
    1:1:int getGLInternalFormat():0:0 -> z
com.badlogic.gdx.graphics.g2d.SpriteBatch -> l.b:
    com.badlogic.gdx.graphics.Mesh mesh -> a
    float[] vertices -> b
    int idx -> c
    com.badlogic.gdx.graphics.Texture lastTexture -> d
    float invTexWidth -> e
    float invTexHeight -> f
    boolean drawing -> g
    com.badlogic.gdx.math.Matrix4 transformMatrix -> h
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> i
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> j
    boolean blendingDisabled -> k
    int blendSrcFunc -> l
    int blendDstFunc -> m
    int blendSrcFuncAlpha -> n
    int blendDstFuncAlpha -> o
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> p
    com.badlogic.gdx.graphics.glutils.ShaderProgram customShader -> q
    boolean ownsShader -> r
    com.badlogic.gdx.graphics.Color color -> s
    float colorPacked -> t
    int renderCalls -> u
    int totalRenderCalls -> v
    int maxSpritesInBatch -> w
    com.badlogic.gdx.graphics.Mesh$VertexDataType defaultVertexDataType -> x
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int,com.badlogic.gdx.graphics.glutils.ShaderProgram):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILm/k;)V"}
    1:1:void end():0:0 -> e
    1:1:void draw(com.badlogic.gdx.graphics.Texture,float[],int,int):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/k;[FII)V"}
    1:1:com.badlogic.gdx.graphics.Color getColor():0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/b;"}
    1:1:com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader():0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lm/k;"}
    1:1:void begin():0:0 -> p
    1:1:void setProjectionMatrix(com.badlogic.gdx.math.Matrix4):0:0 -> r
    1:1:void flush():0:0 -> t
    1:1:boolean isBlendingEnabled():0:0 -> u
    1:1:void setupMatrices():0:0 -> v
    1:1:void switchTexture(com.badlogic.gdx.graphics.Texture):0:0 -> w
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/k;)V"}
com.badlogic.gdx.graphics.g2d.TextureRegion -> l.c:
    com.badlogic.gdx.graphics.Texture texture -> a
    float u -> b
    float v -> c
    float u2 -> d
    float v2 -> e
    int regionWidth -> f
    int regionHeight -> g
    1:1:void <init>(com.badlogic.gdx.graphics.Texture):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/k;)V"}
    2:2:void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/c;)V"}
    3:3:void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/c;IIII)V"}
    1:1:void flip(boolean,boolean):0:0 -> a
    1:1:int getRegionHeight():0:0 -> b
    1:1:int getRegionWidth():0:0 -> c
    1:1:int getRegionX():0:0 -> d
    1:1:int getRegionY():0:0 -> e
    1:1:com.badlogic.gdx.graphics.Texture getTexture():0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/k;"}
    1:1:float getU():0:0 -> g
    1:1:float getU2():0:0 -> h
    1:1:float getV():0:0 -> i
    1:1:float getV2():0:0 -> j
    1:1:void setRegion(float,float,float,float):0:0 -> k
    1:1:void setRegion(int,int,int,int):0:0 -> l
    1:1:void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion):0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/c;)V"}
    1:1:void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int):0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/c;IIII)V"}
com.badlogic.gdx.graphics.glutils.ETC1 -> com.badlogic.gdx.graphics.glutils.ETC1:
    int PKM_HEADER_SIZE -> a
    int ETC1_RGB8_OES -> b
    1:1:com.badlogic.gdx.graphics.Pixmap decodeImage(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,com.badlogic.gdx.graphics.Pixmap$Format):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/glutils/ETC1$a;Lk/i$c;)Lk/i;"}
    1:1:int getPixelSize(com.badlogic.gdx.graphics.Pixmap$Format):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/i$c;)I"}
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data -> com.badlogic.gdx.graphics.glutils.ETC1$a:
    int width -> a
    int height -> b
    java.nio.ByteBuffer compressedData -> c
    int dataOffset -> d
    1:1:void <init>(int,int,java.nio.ByteBuffer,int):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.files.FileHandle):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lj/a;)V"}
    1:1:void dispose():0:0 -> c
    1:1:void checkNPOT():0:0 -> m
    1:1:boolean hasPKMHeader():0:0 -> t
com.badlogic.gdx.graphics.glutils.ETC1TextureData -> com.badlogic.gdx.graphics.glutils.a:
    com.badlogic.gdx.files.FileHandle file -> a
    com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data data -> b
    boolean useMipMaps -> c
    int width -> d
    int height -> e
    boolean isPrepared -> f
    1:1:void <init>(com.badlogic.gdx.files.FileHandle,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lj/a;Z)V"}
    1:1:int getWidth():0:0 -> a
    1:1:com.badlogic.gdx.graphics.TextureData$TextureDataType getType():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/m$b;"}
    1:1:int getHeight():0:0 -> c
    1:1:void prepare():0:0 -> d
    1:1:void consumeCustomData(int):0:0 -> e
    1:1:boolean disposePixmap():0:0 -> f
    1:1:com.badlogic.gdx.graphics.Pixmap consumePixmap():0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/i;"}
    1:1:com.badlogic.gdx.graphics.Pixmap$Format getFormat():0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/i$c;"}
    1:1:boolean isManaged():0:0 -> i
    1:1:boolean useMipMaps():0:0 -> j
    1:1:boolean isPrepared():0:0 -> k
com.badlogic.gdx.graphics.glutils.FileTextureData -> m.a:
    com.badlogic.gdx.files.FileHandle file -> a
    int width -> b
    int height -> c
    com.badlogic.gdx.graphics.Pixmap$Format format -> d
    com.badlogic.gdx.graphics.Pixmap pixmap -> e
    boolean useMipMaps -> f
    boolean isPrepared -> g
    1:1:void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap$Format,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lj/a;Lk/i;Lk/i$c;Z)V"}
    1:1:int getWidth():0:0 -> a
    1:1:com.badlogic.gdx.graphics.TextureData$TextureDataType getType():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/m$b;"}
    1:1:int getHeight():0:0 -> c
    1:1:void prepare():0:0 -> d
    1:1:void consumeCustomData(int):0:0 -> e
    1:1:boolean disposePixmap():0:0 -> f
    1:1:com.badlogic.gdx.graphics.Pixmap consumePixmap():0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/i;"}
    1:1:com.badlogic.gdx.graphics.Pixmap$Format getFormat():0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/i$c;"}
    1:1:boolean isManaged():0:0 -> i
    1:1:boolean useMipMaps():0:0 -> j
    1:1:boolean isPrepared():0:0 -> k
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.graphics.glutils.GLFrameBuffer -> m.b:
    java.util.Map buffers -> a
    boolean defaultFramebufferHandleInitialized -> b
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void clearAllFrameBuffers(com.badlogic.gdx.Application):0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;)V"}
    1:1:java.lang.String getManagedStatus():0:0 -> t
    1:1:java.lang.StringBuilder getManagedStatus(java.lang.StringBuilder):0:0 -> u
    1:1:void invalidateAllFrameBuffers(com.badlogic.gdx.Application):0:0 -> v
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;)V"}
com.badlogic.gdx.graphics.glutils.GLVersion -> m.c:
    int majorVersion -> a
    int minorVersion -> b
    int releaseVersion -> c
    java.lang.String vendorString -> d
    java.lang.String rendererString -> e
    com.badlogic.gdx.graphics.glutils.GLVersion$Type type -> f
    java.lang.String TAG -> g
    1:1:void <init>(com.badlogic.gdx.Application$ApplicationType,java.lang.String,java.lang.String,java.lang.String):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c$a;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V"}
    1:1:void extractVersion(java.lang.String,java.lang.String):0:0 -> a
    1:1:int getMajorVersion():0:0 -> b
    1:1:int parseInt(java.lang.String,int):0:0 -> c
com.badlogic.gdx.graphics.glutils.GLVersion$Type -> m.c$a:
    com.badlogic.gdx.graphics.glutils.GLVersion$Type OpenGL -> d
    com.badlogic.gdx.graphics.glutils.GLVersion$Type GLES -> e
    com.badlogic.gdx.graphics.glutils.GLVersion$Type WebGL -> f
    com.badlogic.gdx.graphics.glutils.GLVersion$Type NONE -> g
    com.badlogic.gdx.graphics.glutils.GLVersion$Type[] $VALUES -> h
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.graphics.glutils.GLVersion$Type valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lm/c$a;"}
    1:1:com.badlogic.gdx.graphics.glutils.GLVersion$Type[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lm/c$a;"}
com.badlogic.gdx.graphics.glutils.HdpiMode -> m.d:
    com.badlogic.gdx.graphics.glutils.HdpiMode Logical -> d
    com.badlogic.gdx.graphics.glutils.HdpiMode Pixels -> e
    com.badlogic.gdx.graphics.glutils.HdpiMode[] $VALUES -> f
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.graphics.glutils.HdpiMode valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lm/d;"}
    1:1:com.badlogic.gdx.graphics.glutils.HdpiMode[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lm/d;"}
com.badlogic.gdx.graphics.glutils.HdpiUtils -> m.e:
    com.badlogic.gdx.graphics.glutils.HdpiMode mode -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void glViewport(int,int,int,int):0:0 -> a
    1:1:int toBackBufferX(int):0:0 -> b
    1:1:int toBackBufferY(int):0:0 -> c
com.badlogic.gdx.graphics.glutils.IndexArray -> m.f:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    boolean empty -> c
    1:1:void <init>(int):0:0 -> <init>
    1:1:void invalidate():0:0 -> d
    1:1:void unbind():0:0 -> i
    1:1:void setIndices(short[],int,int):0:0 -> k
    1:1:java.nio.ShortBuffer getBuffer(boolean):0:0 -> l
    1:1:int getNumMaxIndices():0:0 -> n
    1:1:void bind():0:0 -> q
    1:1:int getNumIndices():0:0 -> s
com.badlogic.gdx.graphics.glutils.IndexBufferObject -> m.g:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    boolean ownsBuffer -> c
    int bufferHandle -> d
    boolean isDirect -> e
    boolean isDirty -> f
    boolean isBound -> g
    int usage -> h
    boolean empty -> i
    1:1:void <init>(boolean,int):0:0 -> <init>
    1:1:void invalidate():0:0 -> d
    1:1:void unbind():0:0 -> i
    1:1:void setIndices(short[],int,int):0:0 -> k
    1:1:java.nio.ShortBuffer getBuffer(boolean):0:0 -> l
    1:1:int getNumMaxIndices():0:0 -> n
    1:1:void bind():0:0 -> q
    1:1:int getNumIndices():0:0 -> s
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData -> m.h:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    int bufferHandle -> c
    boolean isDirect -> d
    boolean isDirty -> e
    boolean isBound -> f
    int usage -> g
    1:1:void <init>(boolean,int):0:0 -> <init>
    1:1:void invalidate():0:0 -> d
    1:1:void unbind():0:0 -> i
    1:1:void setIndices(short[],int,int):0:0 -> k
    1:1:java.nio.ShortBuffer getBuffer(boolean):0:0 -> l
    1:1:int createBufferObject():0:0 -> m
    1:1:int getNumMaxIndices():0:0 -> n
    1:1:void bind():0:0 -> q
    1:1:int getNumIndices():0:0 -> s
com.badlogic.gdx.graphics.glutils.IndexData -> m.i:
    void invalidate() -> d
    void unbind() -> i
    void setIndices(short[],int,int) -> k
    java.nio.ShortBuffer getBuffer(boolean) -> l
    int getNumMaxIndices() -> n
    void bind() -> q
    int getNumIndices() -> s
com.badlogic.gdx.graphics.glutils.KTXTextureData -> com.badlogic.gdx.graphics.glutils.b:
    com.badlogic.gdx.files.FileHandle file -> a
    int glType -> b
    int glTypeSize -> c
    int glFormat -> d
    int glInternalFormat -> e
    int glBaseInternalFormat -> f
    int pixelWidth -> g
    int pixelHeight -> h
    int pixelDepth -> i
    int numberOfArrayElements -> j
    int numberOfFaces -> k
    int numberOfMipmapLevels -> l
    int imagePos -> m
    java.nio.ByteBuffer compressedData -> n
    boolean useMipMaps -> o
    1:1:void <init>(com.badlogic.gdx.files.FileHandle,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lj/a;Z)V"}
    1:1:int getWidth():0:0 -> a
    1:1:com.badlogic.gdx.graphics.TextureData$TextureDataType getType():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/m$b;"}
    1:1:int getHeight():0:0 -> c
    1:1:void prepare():0:0 -> d
    1:1:void consumeCustomData(int):0:0 -> e
    1:1:boolean disposePixmap():0:0 -> f
    1:1:com.badlogic.gdx.graphics.Pixmap consumePixmap():0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/i;"}
    1:1:com.badlogic.gdx.graphics.Pixmap$Format getFormat():0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lk/i$c;"}
    1:1:boolean isManaged():0:0 -> i
    1:1:boolean useMipMaps():0:0 -> j
    1:1:boolean isPrepared():0:0 -> k
    1:1:void disposePreparedData():0:0 -> l
com.badlogic.gdx.graphics.glutils.MipMapGenerator -> m.j:
    boolean useHWMipMap -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void generateMipMap(int,com.badlogic.gdx.graphics.Pixmap,int,int):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILk/i;II)V"}
    1:1:void generateMipMapCPU(int,com.badlogic.gdx.graphics.Pixmap,int,int):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILk/i;II)V"}
    1:1:void generateMipMapDesktop(int,com.badlogic.gdx.graphics.Pixmap,int,int):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILk/i;II)V"}
    1:1:void generateMipMapGLES20(int,com.badlogic.gdx.graphics.Pixmap):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILk/i;)V"}
com.badlogic.gdx.graphics.glutils.ShaderProgram -> m.k:
    java.lang.String log -> a
    boolean isCompiled -> b
    com.badlogic.gdx.utils.ObjectIntMap uniforms -> c
    com.badlogic.gdx.utils.ObjectIntMap uniformTypes -> d
    com.badlogic.gdx.utils.ObjectIntMap uniformSizes -> e
    java.lang.String[] uniformNames -> f
    com.badlogic.gdx.utils.ObjectIntMap attributes -> g
    com.badlogic.gdx.utils.ObjectIntMap attributeTypes -> h
    com.badlogic.gdx.utils.ObjectIntMap attributeSizes -> i
    java.lang.String[] attributeNames -> j
    int program -> k
    int vertexShaderHandle -> l
    int fragmentShaderHandle -> m
    java.nio.FloatBuffer matrix -> n
    java.lang.String vertexShaderSource -> o
    java.lang.String fragmentShaderSource -> p
    boolean invalidated -> q
    int refCount -> r
    java.nio.IntBuffer params -> s
    java.nio.IntBuffer type -> t
    boolean pedantic -> u
    java.lang.String prependVertexCode -> v
    java.lang.String prependFragmentCode -> w
    com.badlogic.gdx.utils.ObjectMap shaders -> x
    java.nio.IntBuffer intbuf -> y
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,java.lang.String):0:0 -> <init>
    1:1:int fetchAttributeLocation(java.lang.String):0:0 -> A
    1:1:void fetchAttributes():0:0 -> B
    1:1:int fetchUniformLocation(java.lang.String):0:0 -> C
    1:1:int fetchUniformLocation(java.lang.String,boolean):0:0 -> D
    1:1:void fetchUniforms():0:0 -> E
    1:1:int getAttributeLocation(java.lang.String):0:0 -> F
    1:1:java.lang.String getLog():0:0 -> G
    1:1:java.lang.String getManagedStatus():0:0 -> H
    1:1:void invalidateAllShaderPrograms(com.badlogic.gdx.Application):0:0 -> I
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;)V"}
    1:1:boolean isCompiled():0:0 -> J
    1:1:int linkProgram(int):0:0 -> K
    1:1:int loadShader(int,java.lang.String):0:0 -> L
    1:1:void setUniformMatrix(int,com.badlogic.gdx.math.Matrix4,boolean):0:0 -> M
    1:1:void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4):0:0 -> N
    1:1:void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4,boolean):0:0 -> O
    1:1:void setUniformi(java.lang.String,int):0:0 -> P
    1:1:void setVertexAttribute(int,int,int,boolean,int,int):0:0 -> Q
    1:1:void setVertexAttribute(int,int,int,boolean,int,java.nio.Buffer):0:0 -> R
    1:1:void addManagedShader(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.glutils.ShaderProgram):0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;Lm/k;)V"}
    1:1:void bind():0:0 -> q
    1:1:void checkManaged():0:0 -> t
    1:1:void clearAllShaderPrograms(com.badlogic.gdx.Application):0:0 -> u
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/c;)V"}
    1:1:void compileShaders(java.lang.String,java.lang.String):0:0 -> v
    1:1:int createProgram():0:0 -> w
    1:1:void disableVertexAttribute(int):0:0 -> x
    1:1:void disableVertexAttribute(java.lang.String):0:0 -> y
    1:1:void enableVertexAttribute(int):0:0 -> z
com.badlogic.gdx.graphics.glutils.VertexArray -> m.l:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    boolean isBound -> d
    1:1:void <init>(int,com.badlogic.gdx.graphics.VertexAttributes):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILk/o;)V"}
    1:1:void invalidate():0:0 -> d
    1:1:void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;[I)V"}
    1:1:void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;[I)V"}
    1:1:void setVertices(float[],int,int):0:0 -> o
com.badlogic.gdx.graphics.glutils.VertexBufferObject -> m.m:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    boolean ownsBuffer -> d
    int bufferHandle -> e
    int usage -> f
    boolean isDirty -> g
    boolean isBound -> h
    1:1:void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttributes):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ZILk/o;)V"}
    1:1:void invalidate():0:0 -> d
    1:1:void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;[I)V"}
    1:1:void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;[I)V"}
    1:1:void bufferChanged():0:0 -> m
    1:1:void setVertices(float[],int,int):0:0 -> o
    1:1:void setBuffer(java.nio.Buffer,boolean,com.badlogic.gdx.graphics.VertexAttributes):0:0 -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/nio/Buffer;ZLk/o;)V"}
    1:1:void setUsage(int):0:0 -> u
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData -> m.n:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    int bufferHandle -> d
    boolean isDirect -> e
    boolean isStatic -> f
    int usage -> g
    boolean isDirty -> h
    boolean isBound -> i
    1:1:void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttributes):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ZILk/o;)V"}
    1:1:void invalidate():0:0 -> d
    1:1:void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;[I)V"}
    1:1:void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;[I)V"}
    1:1:void bufferChanged():0:0 -> m
    1:1:void setVertices(float[],int,int):0:0 -> o
    1:1:int createBufferObject():0:0 -> t
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO -> m.o:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    boolean ownsBuffer -> d
    int bufferHandle -> e
    boolean isStatic -> f
    int usage -> g
    boolean isDirty -> h
    boolean isBound -> i
    int vaoHandle -> j
    com.badlogic.gdx.utils.IntArray cachedLocations -> k
    java.nio.IntBuffer tmpHandle -> l
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttributes):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ZILk/o;)V"}
    1:1:void invalidate():0:0 -> d
    1:1:void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;[I)V"}
    1:1:void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;[I)V"}
    1:1:void bindAttributes(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;[I)V"}
    1:1:void setVertices(float[],int,int):0:0 -> o
    1:1:void bindData(com.badlogic.gdx.graphics.GL20):0:0 -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/d;)V"}
    1:1:void bufferChanged():0:0 -> u
    1:1:void createVAO():0:0 -> v
    1:1:void unbindAttributes(com.badlogic.gdx.graphics.glutils.ShaderProgram):0:0 -> w
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;)V"}
com.badlogic.gdx.graphics.glutils.VertexData -> m.p:
    void invalidate() -> d
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;[I)V"}
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/k;[I)V"}
    void setVertices(float[],int,int) -> o
com.badlogic.gdx.maps.ImageResolver -> n.a:
    com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String) -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Ll/c;"}
com.badlogic.gdx.maps.ImageResolver$DirectImageResolver -> n.a$a:
    com.badlogic.gdx.utils.ObjectMap images -> a
    1:1:void <init>(com.badlogic.gdx.utils.ObjectMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/m;)V"}
    1:1:com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Ll/c;"}
com.badlogic.gdx.maps.Map -> n.b:
    com.badlogic.gdx.maps.MapLayers layers -> a
    com.badlogic.gdx.maps.MapProperties properties -> b
    1:1:void <init>():0:0 -> <init>
    1:1:com.badlogic.gdx.maps.MapLayers getLayers():0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ln/e;"}
    1:1:com.badlogic.gdx.maps.MapProperties getProperties():0:0 -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ln/h;"}
com.badlogic.gdx.maps.MapGroupLayer -> n.c:
    com.badlogic.gdx.maps.MapLayers layers -> n
    1:1:void <init>():0:0 -> <init>
    1:1:void invalidateRenderOffset():0:0 -> i
    1:1:com.badlogic.gdx.maps.MapLayers getLayers():0:0 -> s
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ln/e;"}
com.badlogic.gdx.maps.MapLayer -> n.d:
    java.lang.String name -> a
    float opacity -> b
    boolean visible -> c
    float offsetX -> d
    float offsetY -> e
    float renderOffsetX -> f
    float renderOffsetY -> g
    float parallaxX -> h
    float parallaxY -> i
    boolean renderOffsetDirty -> j
    com.badlogic.gdx.maps.MapLayer parent -> k
    com.badlogic.gdx.maps.MapObjects objects -> l
    com.badlogic.gdx.maps.MapProperties properties -> m
    1:1:void <init>():0:0 -> <init>
    1:1:void calculateRenderOffsets():0:0 -> a
    1:1:com.badlogic.gdx.maps.MapObjects getObjects():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ln/g;"}
    1:1:float getOpacity():0:0 -> c
    1:1:float getParallaxX():0:0 -> d
    1:1:float getParallaxY():0:0 -> e
    1:1:com.badlogic.gdx.maps.MapProperties getProperties():0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ln/h;"}
    1:1:float getRenderOffsetX():0:0 -> g
    1:1:float getRenderOffsetY():0:0 -> h
    1:1:void invalidateRenderOffset():0:0 -> i
    1:1:boolean isVisible():0:0 -> j
    1:1:void setName(java.lang.String):0:0 -> k
    1:1:void setOffsetX(float):0:0 -> l
    1:1:void setOffsetY(float):0:0 -> m
    1:1:void setOpacity(float):0:0 -> n
    1:1:void setParallaxX(float):0:0 -> o
    1:1:void setParallaxY(float):0:0 -> p
    1:1:void setParent(com.badlogic.gdx.maps.MapLayer):0:0 -> q
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ln/d;)V"}
    1:1:void setVisible(boolean):0:0 -> r
com.badlogic.gdx.maps.MapLayers -> n.e:
    com.badlogic.gdx.utils.Array layers -> d
    1:1:void <init>():0:0 -> <init>
    1:1:void add(com.badlogic.gdx.maps.MapLayer):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ln/d;)V"}
    1:1:com.badlogic.gdx.maps.MapLayer get(int):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(I)Ln/d;"}
    1:1:com.badlogic.gdx.utils.Array getByType(java.lang.Class):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;)Lw/a;"}
    1:1:com.badlogic.gdx.utils.Array getByType(java.lang.Class,com.badlogic.gdx.utils.Array):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;Lw/a;)Lw/a;"}
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:int size():0:0 -> size
com.badlogic.gdx.maps.MapObject -> n.f:
    java.lang.String name -> a
    float opacity -> b
    boolean visible -> c
    com.badlogic.gdx.maps.MapProperties properties -> d
    com.badlogic.gdx.graphics.Color color -> e
    1:1:void <init>():0:0 -> <init>
    1:1:com.badlogic.gdx.maps.MapProperties getProperties():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ln/h;"}
    1:1:void setName(java.lang.String):0:0 -> b
    1:1:void setVisible(boolean):0:0 -> c
com.badlogic.gdx.maps.MapObjects -> n.g:
    com.badlogic.gdx.utils.Array objects -> d
    1:1:void <init>():0:0 -> <init>
    1:1:void add(com.badlogic.gdx.maps.MapObject):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ln/f;)V"}
    1:1:java.util.Iterator iterator():0:0 -> iterator
com.badlogic.gdx.maps.MapProperties -> n.h:
    com.badlogic.gdx.utils.ObjectMap properties -> a
    1:1:void <init>():0:0 -> <init>
    1:1:java.lang.Object get(java.lang.String):0:0 -> a
    1:1:java.lang.Object get(java.lang.String,java.lang.Class):0:0 -> b
    1:1:void put(java.lang.String,java.lang.Object):0:0 -> c
com.badlogic.gdx.maps.objects.EllipseMapObject -> o.a:
    com.badlogic.gdx.math.Ellipse ellipse -> f
    1:1:void <init>(float,float,float,float):0:0 -> <init>
com.badlogic.gdx.maps.objects.PolygonMapObject -> o.b:
    com.badlogic.gdx.math.Polygon polygon -> f
    1:1:void <init>(com.badlogic.gdx.math.Polygon):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lt/e;)V"}
com.badlogic.gdx.maps.objects.PolylineMapObject -> o.c:
    com.badlogic.gdx.math.Polyline polyline -> f
    1:1:void <init>(com.badlogic.gdx.math.Polyline):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lt/f;)V"}
com.badlogic.gdx.maps.objects.RectangleMapObject -> o.d:
    com.badlogic.gdx.math.Rectangle rectangle -> f
    1:1:void <init>(float,float,float,float):0:0 -> <init>
com.badlogic.gdx.maps.objects.TextureMapObject -> o.e:
    float x -> f
    float y -> g
    float originX -> h
    float originY -> i
    float scaleX -> j
    float scaleY -> k
    float rotation -> l
    com.badlogic.gdx.graphics.g2d.TextureRegion textureRegion -> m
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/c;)V"}
    1:1:com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/c;"}
    1:1:void setRotation(float):0:0 -> e
    1:1:void setScaleX(float):0:0 -> f
    1:1:void setScaleY(float):0:0 -> g
    1:1:void setTextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion):0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/c;)V"}
    1:1:void setX(float):0:0 -> i
    1:1:void setY(float):0:0 -> j
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader -> p.a:
    com.badlogic.gdx.utils.XmlReader xml -> b
    com.badlogic.gdx.utils.XmlReader$Element root -> c
    boolean convertObjectToTileSpace -> d
    boolean flipY -> e
    int mapTileWidth -> f
    int mapTileHeight -> g
    int mapWidthInPixels -> h
    int mapHeightInPixels -> i
    com.badlogic.gdx.maps.tiled.TiledMap map -> j
    1:1:void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/c;)V"}
    1:1:void addStaticTiledMapTile(com.badlogic.gdx.maps.tiled.TiledMapTileSet,com.badlogic.gdx.graphics.g2d.TextureRegion,int,float,float):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/g;Ll/c;IFF)V"}
    void addStaticTiles(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver,com.badlogic.gdx.maps.tiled.TiledMapTileSet,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.utils.Array,java.lang.String,int,int,int,int,int,java.lang.String,int,int,java.lang.String,int,int,com.badlogic.gdx.files.FileHandle) -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lj/a;Ln/a;Lp/g;Lw/x$a;Lw/a;Ljava/lang/String;IIIIILjava/lang/String;IILjava/lang/String;IILj/a;)V"}
    1:1:void addTileObjectGroup(com.badlogic.gdx.maps.tiled.TiledMapTile,com.badlogic.gdx.utils.XmlReader$Element):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/e;Lw/x$a;)V"}
    1:1:void addTileProperties(com.badlogic.gdx.maps.tiled.TiledMapTile,com.badlogic.gdx.utils.XmlReader$Element):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/e;Lw/x$a;)V"}
    1:1:java.lang.Object castProperty(java.lang.String,java.lang.String,java.lang.String):0:0 -> f
    1:1:com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile createAnimatedTile(com.badlogic.gdx.maps.tiled.TiledMapTileSet,com.badlogic.gdx.maps.tiled.TiledMapTile,com.badlogic.gdx.utils.XmlReader$Element,int):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/g;Lp/e;Lw/x$a;I)Ls/a;"}
    1:1:com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell createTileLayerCell(boolean,boolean,boolean):0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ZZZ)Lp/f$a;"}
    1:1:com.badlogic.gdx.files.FileHandle getRelativeFileHandle(com.badlogic.gdx.files.FileHandle,java.lang.String):0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lj/a;Ljava/lang/String;)Lj/a;"}
    1:1:int[] getTileIds(com.badlogic.gdx.utils.XmlReader$Element,int,int):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/x$a;II)[I"}
    1:1:void loadBasicLayerInfo(com.badlogic.gdx.maps.MapLayer,com.badlogic.gdx.utils.XmlReader$Element):0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ln/d;Lw/x$a;)V"}
    1:1:void loadImageLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayers,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver):0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/b;Ln/e;Lw/x$a;Lj/a;Ln/a;)V"}
    1:1:void loadLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayers,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver):0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/b;Ln/e;Lw/x$a;Lj/a;Ln/a;)V"}
    1:1:void loadLayerGroup(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayers,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver):0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/b;Ln/e;Lw/x$a;Lj/a;Ln/a;)V"}
    1:1:void loadObject(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayer,com.badlogic.gdx.utils.XmlReader$Element):0:0 -> o
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/b;Ln/d;Lw/x$a;)V"}
    1:1:void loadObject(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapObjects,com.badlogic.gdx.utils.XmlReader$Element,float):0:0 -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/b;Ln/g;Lw/x$a;F)V"}
    1:1:void loadObject(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.tiled.TiledMapTile,com.badlogic.gdx.utils.XmlReader$Element):0:0 -> q
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/b;Lp/e;Lw/x$a;)V"}
    1:1:void loadObjectGroup(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayers,com.badlogic.gdx.utils.XmlReader$Element):0:0 -> r
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/b;Ln/e;Lw/x$a;)V"}
    1:1:void loadProperties(com.badlogic.gdx.maps.MapProperties,com.badlogic.gdx.utils.XmlReader$Element):0:0 -> s
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ln/h;Lw/x$a;)V"}
    1:1:void loadTileLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayers,com.badlogic.gdx.utils.XmlReader$Element):0:0 -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/b;Ln/e;Lw/x$a;)V"}
    1:1:void loadTileSet(com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver):0:0 -> u
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/x$a;Lj/a;Ln/a;)V"}
    1:1:com.badlogic.gdx.maps.tiled.TiledMap loadTiledMap(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters,com.badlogic.gdx.maps.ImageResolver):0:0 -> v
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lj/a;Lp/a$a;Ln/a;)Lp/b;"}
    1:1:int unsignedByteToInt(byte):0:0 -> w
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters -> p.a$a:
    boolean generateMipMaps -> a
    com.badlogic.gdx.graphics.Texture$TextureFilter textureMinFilter -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter textureMagFilter -> c
    boolean convertObjectToTileSpace -> d
    boolean flipY -> e
    1:1:void <init>():0:0 -> <init>
com.badlogic.gdx.maps.tiled.TiledMap -> p.b:
    com.badlogic.gdx.maps.tiled.TiledMapTileSets tilesets -> c
    com.badlogic.gdx.utils.Array ownedResources -> d
    1:1:void <init>():0:0 -> <init>
    1:1:com.badlogic.gdx.maps.tiled.TiledMapTileSets getTileSets():0:0 -> u
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lp/h;"}
    1:1:void setOwnedResources(com.badlogic.gdx.utils.Array):0:0 -> v
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/a;)V"}
com.badlogic.gdx.maps.tiled.TiledMapImageLayer -> p.c:
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> n
    float x -> o
    float y -> p
    1:1:void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/c;FF)V"}
    1:1:com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion():0:0 -> s
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/c;"}
    1:1:float getX():0:0 -> t
    1:1:float getY():0:0 -> u
com.badlogic.gdx.maps.tiled.TiledMapRenderer -> p.d:
    void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer) -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/f;)V"}
com.badlogic.gdx.maps.tiled.TiledMapTile -> p.e:
    float getOffsetX() -> a
    int getId() -> b
    void setOffsetX(float) -> c
    void setOffsetY(float) -> d
    com.badlogic.gdx.maps.MapObjects getObjects() -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ln/g;"}
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/c;"}
    void setId(int) -> g
    com.badlogic.gdx.maps.MapProperties getProperties() -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ln/h;"}
    float getOffsetY() -> i
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode -> p.e$a:
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode NONE -> d
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode ALPHA -> e
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode[] $VALUES -> f
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lp/e$a;"}
    1:1:com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lp/e$a;"}
com.badlogic.gdx.maps.tiled.TiledMapTileLayer -> p.f:
    int width -> n
    int height -> o
    int tileWidth -> p
    int tileHeight -> q
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell[][] cells -> r
    1:1:void <init>(int,int,int,int):0:0 -> <init>
    1:1:com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell getCell(int,int):0:0 -> s
      # {"id":"com.android.tools.r8.residualsignature","signature":"(II)Lp/f$a;"}
    1:1:int getHeight():0:0 -> t
    1:1:int getTileHeight():0:0 -> u
    1:1:int getTileWidth():0:0 -> v
    1:1:int getWidth():0:0 -> w
    1:1:void setCell(int,int,com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell):0:0 -> x
      # {"id":"com.android.tools.r8.residualsignature","signature":"(IILp/f$a;)V"}
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell -> p.f$a:
    com.badlogic.gdx.maps.tiled.TiledMapTile tile -> a
    boolean flipHorizontally -> b
    boolean flipVertically -> c
    int rotation -> d
    void <init>() -> <init>
    1:1:boolean getFlipHorizontally():0:0 -> a
    1:1:boolean getFlipVertically():0:0 -> b
    1:1:int getRotation():0:0 -> c
    1:1:com.badlogic.gdx.maps.tiled.TiledMapTile getTile():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lp/e;"}
    1:1:com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell setFlipHorizontally(boolean):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Z)Lp/f$a;"}
    1:1:com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell setFlipVertically(boolean):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Z)Lp/f$a;"}
    1:1:com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell setRotation(int):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(I)Lp/f$a;"}
    1:1:com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell setTile(com.badlogic.gdx.maps.tiled.TiledMapTile):0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/e;)Lp/f$a;"}
com.badlogic.gdx.maps.tiled.TiledMapTileSet -> p.g:
    java.lang.String name -> d
    com.badlogic.gdx.utils.IntMap tiles -> e
    com.badlogic.gdx.maps.MapProperties properties -> f
    1:1:void <init>():0:0 -> <init>
    1:1:com.badlogic.gdx.maps.MapProperties getProperties():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ln/h;"}
    1:1:com.badlogic.gdx.maps.tiled.TiledMapTile getTile(int):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(I)Lp/e;"}
    1:1:void putTile(int,com.badlogic.gdx.maps.tiled.TiledMapTile):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILp/e;)V"}
    1:1:void setName(java.lang.String):0:0 -> d
    1:1:java.util.Iterator iterator():0:0 -> iterator
com.badlogic.gdx.maps.tiled.TiledMapTileSets -> p.h:
    com.badlogic.gdx.utils.Array tilesets -> d
    1:1:void <init>():0:0 -> <init>
    1:1:void addTileSet(com.badlogic.gdx.maps.tiled.TiledMapTileSet):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/g;)V"}
    1:1:com.badlogic.gdx.maps.tiled.TiledMapTile getTile(int):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(I)Lp/e;"}
    1:1:java.util.Iterator iterator():0:0 -> iterator
com.badlogic.gdx.maps.tiled.TmxMapLoader -> p.i:
    1:1:void <init>():0:0 -> <init>
    1:1:void addStaticTiles(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver,com.badlogic.gdx.maps.tiled.TiledMapTileSet,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.utils.Array,java.lang.String,int,int,int,int,int,java.lang.String,int,int,java.lang.String,int,int,com.badlogic.gdx.files.FileHandle):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lj/a;Ln/a;Lp/g;Lw/x$a;Lw/a;Ljava/lang/String;IIIIILjava/lang/String;IILjava/lang/String;IILj/a;)V"}
    1:1:com.badlogic.gdx.utils.Array getDependencyFileHandles(com.badlogic.gdx.files.FileHandle):0:0 -> x
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lj/a;)Lw/a;"}
    1:1:com.badlogic.gdx.maps.tiled.TiledMap load(java.lang.String):0:0 -> y
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lp/b;"}
    1:1:com.badlogic.gdx.maps.tiled.TiledMap load(java.lang.String,com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters):0:0 -> z
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;Lp/i$a;)Lp/b;"}
com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters -> p.i$a:
    void <init>() -> <init>
com.badlogic.gdx.maps.tiled.objects.TiledMapTileMapObject -> q.a:
    boolean flipHorizontally -> n
    boolean flipVertically -> o
    com.badlogic.gdx.maps.tiled.TiledMapTile tile -> p
    1:1:void <init>(com.badlogic.gdx.maps.tiled.TiledMapTile,boolean,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/e;ZZ)V"}
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer -> r.a:
    com.badlogic.gdx.maps.tiled.TiledMap map -> a
    float unitScale -> b
    com.badlogic.gdx.graphics.g2d.Batch batch -> c
    com.badlogic.gdx.math.Rectangle viewBounds -> d
    com.badlogic.gdx.math.Rectangle imageBounds -> e
    boolean ownsBatch -> f
    float[] vertices -> g
    1:1:void <init>(com.badlogic.gdx.maps.tiled.TiledMap,float):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/b;F)V"}
    1:1:void setView(com.badlogic.gdx.graphics.OrthographicCamera):0:0 -> A
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/h;)V"}
    1:1:void beginRender():0:0 -> t
    1:1:void endRender():0:0 -> u
    1:1:void render():0:0 -> v
    1:1:void renderImageLayer(com.badlogic.gdx.maps.tiled.TiledMapImageLayer):0:0 -> w
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/c;)V"}
    1:1:void renderMapLayer(com.badlogic.gdx.maps.MapLayer):0:0 -> x
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ln/d;)V"}
    1:1:void renderObject(com.badlogic.gdx.maps.MapObject):0:0 -> y
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ln/f;)V"}
    1:1:void renderObjects(com.badlogic.gdx.maps.MapLayer):0:0 -> z
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ln/d;)V"}
com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer -> r.b:
    1:1:void <init>(com.badlogic.gdx.maps.tiled.TiledMap,float):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/b;F)V"}
    1:1:void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer):0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/f;)V"}
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile -> s.a:
    int id -> a
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode blendMode -> b
    com.badlogic.gdx.maps.MapProperties properties -> c
    com.badlogic.gdx.maps.MapObjects objects -> d
    com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile[] frameTiles -> e
    int[] animationIntervals -> f
    int loopDuration -> g
    long lastTiledMapRenderTime -> h
    long initialTimeOffset -> i
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(com.badlogic.gdx.utils.IntArray,com.badlogic.gdx.utils.Array):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/g;Lw/a;)V"}
    1:1:float getOffsetX():0:0 -> a
    1:1:int getId():0:0 -> b
    1:1:void setOffsetX(float):0:0 -> c
    1:1:void setOffsetY(float):0:0 -> d
    1:1:com.badlogic.gdx.maps.MapObjects getObjects():0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ln/g;"}
    1:1:com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion():0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/c;"}
    1:1:void setId(int):0:0 -> g
    1:1:com.badlogic.gdx.maps.MapProperties getProperties():0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ln/h;"}
    1:1:float getOffsetY():0:0 -> i
    1:1:com.badlogic.gdx.maps.tiled.TiledMapTile getCurrentFrame():0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lp/e;"}
    1:1:int getCurrentFrameIndex():0:0 -> k
    1:1:void updateAnimationBaseTime():0:0 -> l
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile -> s.b:
    int id -> a
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode blendMode -> b
    com.badlogic.gdx.maps.MapProperties properties -> c
    com.badlogic.gdx.maps.MapObjects objects -> d
    com.badlogic.gdx.graphics.g2d.TextureRegion textureRegion -> e
    float offsetX -> f
    float offsetY -> g
    1:1:void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/c;)V"}
    1:1:float getOffsetX():0:0 -> a
    1:1:int getId():0:0 -> b
    1:1:void setOffsetX(float):0:0 -> c
    1:1:void setOffsetY(float):0:0 -> d
    1:1:com.badlogic.gdx.maps.MapObjects getObjects():0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ln/g;"}
    1:1:com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion():0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/c;"}
    1:1:void setId(int):0:0 -> g
    1:1:com.badlogic.gdx.maps.MapProperties getProperties():0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ln/h;"}
    1:1:float getOffsetY():0:0 -> i
com.badlogic.gdx.math.Ellipse -> t.a:
    float x -> d
    float y -> e
    float width -> f
    float height -> g
    1:1:void <init>(float,float,float,float):0:0 -> <init>
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
com.badlogic.gdx.math.Frustum -> t.b:
    com.badlogic.gdx.math.Plane[] planes -> a
    com.badlogic.gdx.math.Vector3[] planePoints -> b
    float[] planePointsArray -> c
    com.badlogic.gdx.math.Vector3[] clipSpacePlanePoints -> d
    float[] clipSpacePlanePointsArray -> e
    com.badlogic.gdx.math.Vector3 tmpV -> f
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    1:1:void update(com.badlogic.gdx.math.Matrix4):0:0 -> a
com.badlogic.gdx.math.MathUtils -> t.c:
    java.util.Random random -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:boolean isEqual(float,float,float):0:0 -> a
    1:1:boolean isPowerOfTwo(int):0:0 -> b
    1:1:int nextPowerOfTwo(int):0:0 -> c
    1:1:int roundPositive(float):0:0 -> d
com.badlogic.gdx.math.Matrix4 -> com.badlogic.gdx.math.Matrix4:
    float[] val -> d
    com.badlogic.gdx.math.Quaternion quat -> e
    com.badlogic.gdx.math.Quaternion quat2 -> f
    com.badlogic.gdx.math.Vector3 l_vez -> g
    com.badlogic.gdx.math.Vector3 l_vex -> h
    com.badlogic.gdx.math.Vector3 l_vey -> i
    com.badlogic.gdx.math.Vector3 tmpVec -> j
    com.badlogic.gdx.math.Matrix4 tmpMat -> k
    com.badlogic.gdx.math.Vector3 right -> l
    com.badlogic.gdx.math.Vector3 tmpForward -> m
    com.badlogic.gdx.math.Vector3 tmpUp -> n
    1:1:float det(float[]):0:0 -> a
    1:1:com.badlogic.gdx.math.Matrix4 idt():0:0 -> b
    1:1:boolean inv(float[]):0:0 -> c
    1:1:com.badlogic.gdx.math.Matrix4 mul(com.badlogic.gdx.math.Matrix4):0:0 -> d
    1:1:void mul(float[],float[]):0:0 -> e
    1:1:com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix4):0:0 -> f
    1:1:com.badlogic.gdx.math.Matrix4 set(float[]):0:0 -> g
    1:1:com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3):0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lt/k;Lt/k;)Lcom/badlogic/gdx/math/Matrix4;"}
    1:1:com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3):0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lt/k;Lt/k;Lt/k;)Lcom/badlogic/gdx/math/Matrix4;"}
    1:1:com.badlogic.gdx.math.Matrix4 setToOrtho(float,float,float,float,float,float):0:0 -> j
    1:1:com.badlogic.gdx.math.Matrix4 setToOrtho2D(float,float,float,float):0:0 -> k
    1:1:com.badlogic.gdx.math.Matrix4 setToTranslation(float,float,float):0:0 -> l
com.badlogic.gdx.math.Plane -> t.d:
    com.badlogic.gdx.math.Vector3 normal -> d
    float d -> e
    1:1:void <init>(com.badlogic.gdx.math.Vector3,float):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lt/k;F)V"}
    1:1:void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lt/k;Lt/k;Lt/k;)V"}
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.math.Polygon -> t.e:
    float[] localVertices -> a
    float x -> b
    float y -> c
    float scaleX -> d
    float scaleY -> e
    boolean dirty -> f
    1:1:void <init>(float[]):0:0 -> <init>
    1:1:void setPosition(float,float):0:0 -> a
com.badlogic.gdx.math.Polyline -> t.f:
    float[] localVertices -> a
    float x -> b
    float y -> c
    float scaleX -> d
    float scaleY -> e
    boolean calculateScaledLength -> f
    boolean calculateLength -> g
    boolean dirty -> h
    1:1:void <init>(float[]):0:0 -> <init>
    1:1:void setPosition(float,float):0:0 -> a
com.badlogic.gdx.math.Quaternion -> t.g:
    float x -> d
    float y -> e
    float z -> f
    float w -> g
    com.badlogic.gdx.math.Quaternion tmp1 -> h
    com.badlogic.gdx.math.Quaternion tmp2 -> i
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(float,float,float,float):0:0 -> <init>
    1:1:com.badlogic.gdx.math.Quaternion idt():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lt/g;"}
    1:1:com.badlogic.gdx.math.Quaternion set(float,float,float,float):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Lt/g;"}
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.math.RandomXS128 -> t.h:
    long seed0 -> d
    long seed1 -> e
    1:1:void <init>():0:0 -> <init>
    1:1:long murmurHash3(long):0:0 -> a
    1:1:long nextLong(long):0:0 -> b
    1:1:void setState(long,long):0:0 -> c
    1:1:int next(int):0:0 -> next
    1:1:boolean nextBoolean():0:0 -> nextBoolean
    1:1:void nextBytes(byte[]):0:0 -> nextBytes
    1:1:double nextDouble():0:0 -> nextDouble
    1:1:float nextFloat():0:0 -> nextFloat
    1:1:int nextInt():0:0 -> nextInt
    2:2:int nextInt(int):0:0 -> nextInt
    1:1:long nextLong():0:0 -> nextLong
    1:1:void setSeed(long):0:0 -> setSeed
com.badlogic.gdx.math.Rectangle -> t.i:
    float x -> d
    float y -> e
    float width -> f
    float height -> g
    com.badlogic.gdx.math.Rectangle tmp -> h
    com.badlogic.gdx.math.Rectangle tmp2 -> i
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:void <init>(float,float,float,float):0:0 -> <init>
    1:1:boolean contains(com.badlogic.gdx.math.Rectangle):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lt/i;)Z"}
    1:1:boolean overlaps(com.badlogic.gdx.math.Rectangle):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lt/i;)Z"}
    1:1:com.badlogic.gdx.math.Rectangle set(float,float,float,float):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Lt/i;"}
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.math.Vector2 -> t.j:
    float x -> d
    float y -> e
    com.badlogic.gdx.math.Vector2 X -> f
    com.badlogic.gdx.math.Vector2 Y -> g
    com.badlogic.gdx.math.Vector2 Zero -> h
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:void <init>(float,float):0:0 -> <init>
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.math.Vector3 -> t.k:
    float x -> d
    float y -> e
    float z -> f
    com.badlogic.gdx.math.Vector3 X -> g
    com.badlogic.gdx.math.Vector3 Y -> h
    com.badlogic.gdx.math.Vector3 Z -> i
    com.badlogic.gdx.math.Vector3 Zero -> j
    com.badlogic.gdx.math.Matrix4 tmpMat -> k
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:void <init>(float,float,float):0:0 -> <init>
    1:1:com.badlogic.gdx.math.Vector3 add(float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFF)Lt/k;"}
    1:1:com.badlogic.gdx.math.Vector3 add(com.badlogic.gdx.math.Vector3):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lt/k;)Lt/k;"}
    1:1:com.badlogic.gdx.math.Vector3 crs(float,float,float):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFF)Lt/k;"}
    1:1:com.badlogic.gdx.math.Vector3 crs(com.badlogic.gdx.math.Vector3):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lt/k;)Lt/k;"}
    1:1:float dot(com.badlogic.gdx.math.Vector3):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lt/k;)F"}
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:float len2():0:0 -> f
    1:1:com.badlogic.gdx.math.Vector3 nor():0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lt/k;"}
    1:1:com.badlogic.gdx.math.Vector3 scl(float):0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(F)Lt/k;"}
    1:1:int hashCode():0:0 -> hashCode
    1:1:com.badlogic.gdx.math.Vector3 set(float,float,float):0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFF)Lt/k;"}
    1:1:com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector3):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lt/k;)Lt/k;"}
    1:1:com.badlogic.gdx.math.Vector3 sub(float,float,float):0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFF)Lt/k;"}
    1:1:com.badlogic.gdx.math.Vector3 sub(com.badlogic.gdx.math.Vector3):0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lt/k;)Lt/k;"}
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.math.collision.Ray -> u.a:
    com.badlogic.gdx.math.Vector3 origin -> d
    com.badlogic.gdx.math.Vector3 direction -> e
    com.badlogic.gdx.math.Vector3 tmp -> f
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lt/k;Lt/k;)V"}
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.net.NetJavaImpl -> v.a:
    java.util.concurrent.ThreadPoolExecutor executorService -> a
    com.badlogic.gdx.utils.ObjectMap connections -> b
    com.badlogic.gdx.utils.ObjectMap listeners -> c
    com.badlogic.gdx.utils.ObjectMap tasks -> d
    1:1:void <init>(int):0:0 -> <init>
com.badlogic.gdx.net.NetJavaImpl$1 -> v.a$a:
    java.util.concurrent.atomic.AtomicInteger threadID -> a
    com.badlogic.gdx.net.NetJavaImpl this$0 -> b
    1:1:void <init>(com.badlogic.gdx.net.NetJavaImpl):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lv/a;)V"}
    1:1:java.lang.Thread newThread(java.lang.Runnable):0:0 -> newThread
com.badlogic.gdx.utils.Array -> w.a:
    java.lang.Object[] items -> d
    int size -> e
    boolean ordered -> f
    com.badlogic.gdx.utils.Array$ArrayIterable iterable -> g
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int):0:0 -> <init>
    3:3:void <init>(java.lang.Class):0:0 -> <init>
    4:4:void <init>(boolean,int):0:0 -> <init>
    5:5:void <init>(boolean,int,java.lang.Class):0:0 -> <init>
    1:1:void add(java.lang.Object):0:0 -> a
    1:1:void addAll(com.badlogic.gdx.utils.Array):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/a;)V"}
    1:1:void addAll(java.lang.Object[],int,int):0:0 -> c
    1:1:void clear():0:0 -> clear
    1:1:java.lang.Object first():0:0 -> d
    1:1:com.badlogic.gdx.utils.Array$ArrayIterator iterator():0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/a$b;"}
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:boolean notEmpty():0:0 -> f
    1:1:java.lang.Object peek():0:0 -> g
    1:1:java.lang.Object get(int):0:0 -> get
    1:1:java.lang.Object pop():0:0 -> h
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.Object removeIndex(int):0:0 -> i
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:boolean removeValue(java.lang.Object,boolean):0:0 -> j
    1:1:java.lang.Object[] resize(int):0:0 -> k
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.Array$ArrayIterable -> w.a$a:
    com.badlogic.gdx.utils.Array array -> d
    boolean allowRemove -> e
    com.badlogic.gdx.utils.Array$ArrayIterator iterator1 -> f
    com.badlogic.gdx.utils.Array$ArrayIterator iterator2 -> g
    1:1:void <init>(com.badlogic.gdx.utils.Array):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/a;)V"}
    2:2:void <init>(com.badlogic.gdx.utils.Array,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/a;Z)V"}
    1:1:com.badlogic.gdx.utils.Array$ArrayIterator iterator():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/a$b;"}
    1:1:java.util.Iterator iterator():0:0 -> iterator
com.badlogic.gdx.utils.Array$ArrayIterator -> w.a$b:
    com.badlogic.gdx.utils.Array array -> d
    boolean allowRemove -> e
    int index -> f
    boolean valid -> g
    1:1:void <init>(com.badlogic.gdx.utils.Array,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/a;Z)V"}
    1:1:com.badlogic.gdx.utils.Array$ArrayIterator iterator():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/a$b;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.Base64Coder -> w.b:
    com.badlogic.gdx.utils.Base64Coder$CharMap regularMap -> a
    com.badlogic.gdx.utils.Base64Coder$CharMap urlsafeMap -> b
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:byte[] decode(java.lang.String):0:0 -> a
    1:1:byte[] decode(char[]):0:0 -> b
    1:1:byte[] decode(char[],int,int,byte[]):0:0 -> c
com.badlogic.gdx.utils.Base64Coder$CharMap -> w.b$a:
    char[] encodingMap -> a
    byte[] decodingMap -> b
    1:1:void <init>(char,char):0:0 -> <init>
com.badlogic.gdx.utils.BufferUtils -> com.badlogic.gdx.utils.BufferUtils:
    com.badlogic.gdx.utils.Array unsafeBuffers -> a
    int allocatedUnsafe -> b
    1:1:void copy(float[],java.nio.Buffer,int,int):0:0 -> a
    1:1:void disposeUnsafeByteBuffer(java.nio.ByteBuffer):0:0 -> b
    1:1:java.nio.ByteBuffer newByteBuffer(int):0:0 -> c
    1:1:java.nio.FloatBuffer newFloatBuffer(int):0:0 -> d
    1:1:java.nio.IntBuffer newIntBuffer(int):0:0 -> e
    1:1:java.nio.ByteBuffer newUnsafeByteBuffer(int):0:0 -> f
com.badlogic.gdx.utils.Collections -> w.c:
    boolean allocateIterators -> a
com.badlogic.gdx.utils.Disposable -> w.d:
    void dispose() -> c
com.badlogic.gdx.utils.GdxNativesLoader -> w.e:
    boolean disableNativesLoading -> a
    boolean nativesLoaded -> b
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void load():0:0 -> a
com.badlogic.gdx.utils.GdxRuntimeException -> w.f:
    1:1:void <init>(java.lang.String):0:0 -> <init>
    2:2:void <init>(java.lang.String,java.lang.Throwable):0:0 -> <init>
com.badlogic.gdx.utils.IntArray -> w.g:
    int[] items -> a
    int size -> b
    boolean ordered -> c
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(boolean,int):0:0 -> <init>
    1:1:void add(int):0:0 -> a
    1:1:void clear():0:0 -> b
    1:1:int get(int):0:0 -> c
    1:1:int[] resize(int):0:0 -> d
    1:1:int[] toArray():0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.IntIntMap -> w.h:
    int size -> d
    int[] keyTable -> e
    int[] valueTable -> f
    int zeroValue -> g
    boolean hasZeroValue -> h
    float loadFactor -> i
    int threshold -> j
    int shift -> k
    int mask -> l
    com.badlogic.gdx.utils.IntIntMap$Entries entries1 -> m
    com.badlogic.gdx.utils.IntIntMap$Entries entries2 -> n
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int,float):0:0 -> <init>
    1:1:boolean containsKey(int):0:0 -> a
    1:1:com.badlogic.gdx.utils.IntIntMap$Entries entries():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/h$a;"}
    1:1:int get(int,int):0:0 -> c
    1:1:int locateKey(int):0:0 -> d
    1:1:int place(int):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:void put(int,int):0:0 -> f
    1:1:void putResize(int,int):0:0 -> g
    1:1:int remove(int,int):0:0 -> h
    1:1:int hashCode():0:0 -> hashCode
    1:1:void resize(int):0:0 -> i
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.IntIntMap$Entries -> w.h$a:
    com.badlogic.gdx.utils.IntIntMap$Entry entry -> i
    1:1:void <init>(com.badlogic.gdx.utils.IntIntMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/h;)V"}
    1:1:void reset():0:0 -> b
    1:1:com.badlogic.gdx.utils.IntIntMap$Entry next():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/h$b;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.IntIntMap$Entry -> w.h$b:
    int key -> a
    int value -> b
    void <init>() -> <init>
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.IntIntMap$MapIterator -> w.h$c:
    boolean hasNext -> d
    com.badlogic.gdx.utils.IntIntMap map -> e
    int nextIndex -> f
    int currentIndex -> g
    boolean valid -> h
    1:1:void <init>(com.badlogic.gdx.utils.IntIntMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/h;)V"}
    1:1:void findNextIndex():0:0 -> a
    1:1:void reset():0:0 -> b
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.IntMap -> w.i:
    int size -> d
    int[] keyTable -> e
    java.lang.Object[] valueTable -> f
    java.lang.Object zeroValue -> g
    boolean hasZeroValue -> h
    float loadFactor -> i
    int threshold -> j
    int shift -> k
    int mask -> l
    com.badlogic.gdx.utils.IntMap$Entries entries1 -> m
    com.badlogic.gdx.utils.IntMap$Entries entries2 -> n
    com.badlogic.gdx.utils.IntMap$Values values1 -> o
    com.badlogic.gdx.utils.IntMap$Values values2 -> p
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int,float):0:0 -> <init>
    1:1:void ensureCapacity(int):0:0 -> a
    1:1:com.badlogic.gdx.utils.IntMap$Entries entries():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/i$a;"}
    1:1:java.lang.Object get(int,java.lang.Object):0:0 -> c
    1:1:int locateKey(int):0:0 -> d
    1:1:int place(int):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:java.lang.Object put(int,java.lang.Object):0:0 -> f
    1:1:void putAll(com.badlogic.gdx.utils.IntMap):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/i;)V"}
    1:1:java.lang.Object get(int):0:0 -> get
    1:1:void putResize(int,java.lang.Object):0:0 -> h
    1:1:int hashCode():0:0 -> hashCode
    1:1:void resize(int):0:0 -> i
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:com.badlogic.gdx.utils.IntMap$Values values():0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/i$d;"}
    1:1:java.lang.Object remove(int):0:0 -> remove
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.IntMap$Entries -> w.i$a:
    com.badlogic.gdx.utils.IntMap$Entry entry -> i
    1:1:void <init>(com.badlogic.gdx.utils.IntMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/i;)V"}
    1:1:void reset():0:0 -> b
    1:1:com.badlogic.gdx.utils.IntMap$Entry next():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/i$b;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.IntMap$Entry -> w.i$b:
    int key -> a
    java.lang.Object value -> b
    void <init>() -> <init>
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.IntMap$MapIterator -> w.i$c:
    boolean hasNext -> d
    com.badlogic.gdx.utils.IntMap map -> e
    int nextIndex -> f
    int currentIndex -> g
    boolean valid -> h
    1:1:void <init>(com.badlogic.gdx.utils.IntMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/i;)V"}
    1:1:void findNextIndex():0:0 -> a
    1:1:void reset():0:0 -> b
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.IntMap$Values -> w.i$d:
    1:1:void <init>(com.badlogic.gdx.utils.IntMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/i;)V"}
    1:1:void reset():0:0 -> b
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.IntSet -> w.j:
    int size -> a
    int[] keyTable -> b
    boolean hasZeroValue -> c
    float loadFactor -> d
    int threshold -> e
    int shift -> f
    int mask -> g
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int,float):0:0 -> <init>
    1:1:boolean add(int):0:0 -> a
    1:1:void addResize(int):0:0 -> b
    1:1:boolean contains(int):0:0 -> c
    1:1:int locateKey(int):0:0 -> d
    1:1:int place(int):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:boolean remove(int):0:0 -> f
    1:1:void resize(int):0:0 -> g
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.NumberUtils -> w.k:
    1:1:int floatToIntBits(float):0:0 -> a
    1:1:int floatToRawIntBits(float):0:0 -> b
    1:1:float intToFloatColor(int):0:0 -> c
com.badlogic.gdx.utils.ObjectIntMap -> w.l:
    int size -> d
    java.lang.Object[] keyTable -> e
    int[] valueTable -> f
    float loadFactor -> g
    int threshold -> h
    int shift -> i
    int mask -> j
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries1 -> k
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries2 -> l
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int,float):0:0 -> <init>
    1:1:boolean containsKey(java.lang.Object):0:0 -> a
    1:1:com.badlogic.gdx.utils.ObjectIntMap$Entries entries():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/l$a;"}
    1:1:int get(java.lang.Object,int):0:0 -> c
    1:1:com.badlogic.gdx.utils.ObjectIntMap$Entries iterator():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/l$a;"}
    1:1:int locateKey(java.lang.Object):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int place(java.lang.Object):0:0 -> f
    1:1:void put(java.lang.Object,int):0:0 -> g
    1:1:void putResize(java.lang.Object,int):0:0 -> h
    1:1:int hashCode():0:0 -> hashCode
    1:1:void resize(int):0:0 -> i
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.String toString(java.lang.String,boolean):0:0 -> j
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.ObjectIntMap$Entries -> w.l$a:
    com.badlogic.gdx.utils.ObjectIntMap$Entry entry -> i
    1:1:void <init>(com.badlogic.gdx.utils.ObjectIntMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/l;)V"}
    1:1:void reset():0:0 -> b
    1:1:com.badlogic.gdx.utils.ObjectIntMap$Entries iterator():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/l$a;"}
    1:1:com.badlogic.gdx.utils.ObjectIntMap$Entry next():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/l$b;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.ObjectIntMap$Entry -> w.l$b:
    java.lang.Object key -> a
    int value -> b
    void <init>() -> <init>
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.ObjectIntMap$MapIterator -> w.l$c:
    boolean hasNext -> d
    com.badlogic.gdx.utils.ObjectIntMap map -> e
    int nextIndex -> f
    int currentIndex -> g
    boolean valid -> h
    1:1:void <init>(com.badlogic.gdx.utils.ObjectIntMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/l;)V"}
    1:1:void findNextIndex():0:0 -> a
    1:1:void reset():0:0 -> b
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.ObjectMap -> w.m:
    int size -> d
    java.lang.Object[] keyTable -> e
    java.lang.Object[] valueTable -> f
    float loadFactor -> g
    int threshold -> h
    int shift -> i
    int mask -> j
    com.badlogic.gdx.utils.ObjectMap$Entries entries1 -> k
    com.badlogic.gdx.utils.ObjectMap$Entries entries2 -> l
    com.badlogic.gdx.utils.ObjectMap$Values values1 -> m
    com.badlogic.gdx.utils.ObjectMap$Values values2 -> n
    com.badlogic.gdx.utils.ObjectMap$Keys keys1 -> o
    com.badlogic.gdx.utils.ObjectMap$Keys keys2 -> p
    java.lang.Object dummy -> q
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int):0:0 -> <init>
    3:3:void <init>(int,float):0:0 -> <init>
    1:1:boolean containsKey(java.lang.Object):0:0 -> a
    1:1:com.badlogic.gdx.utils.ObjectMap$Entries entries():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/m$a;"}
    1:1:java.lang.Object get(java.lang.Object):0:0 -> c
    1:1:java.lang.Object get(java.lang.Object,java.lang.Object):0:0 -> d
    1:1:com.badlogic.gdx.utils.ObjectMap$Entries iterator():0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/m$a;"}
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:com.badlogic.gdx.utils.ObjectMap$Keys keys():0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/m$c;"}
    1:1:int locateKey(java.lang.Object):0:0 -> g
    1:1:int place(java.lang.Object):0:0 -> h
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.Object put(java.lang.Object,java.lang.Object):0:0 -> i
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:void putResize(java.lang.Object,java.lang.Object):0:0 -> j
    1:1:java.lang.Object remove(java.lang.Object):0:0 -> k
    1:1:void resize(int):0:0 -> l
    1:1:java.lang.String toString(java.lang.String,boolean):0:0 -> m
    1:1:com.badlogic.gdx.utils.ObjectMap$Values values():0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/m$e;"}
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.ObjectMap$Entries -> w.m$a:
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> i
    1:1:void <init>(com.badlogic.gdx.utils.ObjectMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/m;)V"}
    1:1:void reset():0:0 -> b
    1:1:com.badlogic.gdx.utils.ObjectMap$Entries iterator():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/m$a;"}
    1:1:com.badlogic.gdx.utils.ObjectMap$Entry next():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/m$b;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.ObjectMap$Entry -> w.m$b:
    java.lang.Object key -> a
    java.lang.Object value -> b
    void <init>() -> <init>
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.ObjectMap$Keys -> w.m$c:
    1:1:void <init>(com.badlogic.gdx.utils.ObjectMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/m;)V"}
    1:1:void reset():0:0 -> b
    1:1:com.badlogic.gdx.utils.ObjectMap$Keys iterator():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/m$c;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.ObjectMap$MapIterator -> w.m$d:
    boolean hasNext -> d
    com.badlogic.gdx.utils.ObjectMap map -> e
    int nextIndex -> f
    int currentIndex -> g
    boolean valid -> h
    1:1:void <init>(com.badlogic.gdx.utils.ObjectMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/m;)V"}
    1:1:void findNextIndex():0:0 -> a
    1:1:void reset():0:0 -> b
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.ObjectMap$Values -> w.m$e:
    1:1:void <init>(com.badlogic.gdx.utils.ObjectMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/m;)V"}
    1:1:void reset():0:0 -> b
    1:1:com.badlogic.gdx.utils.ObjectMap$Values iterator():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/m$e;"}
    1:1:com.badlogic.gdx.utils.Array toArray():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lw/a;"}
    1:1:com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/a;)Lw/a;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.ObjectSet -> w.n:
    1:1:int tableSize(int,float):0:0 -> a
com.badlogic.gdx.utils.Pool -> w.o:
    int max -> a
    int peak -> b
    com.badlogic.gdx.utils.Array freeObjects -> c
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int,int):0:0 -> <init>
    1:1:void discard(java.lang.Object):0:0 -> a
    1:1:void free(java.lang.Object):0:0 -> b
    1:1:void freeAll(com.badlogic.gdx.utils.Array):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/a;)V"}
    java.lang.Object newObject() -> d
    1:1:java.lang.Object obtain():0:0 -> e
    1:1:void reset(java.lang.Object):0:0 -> f
com.badlogic.gdx.utils.Scaling -> w.p:
    com.badlogic.gdx.math.Vector2 temp -> a
    com.badlogic.gdx.utils.Scaling fit -> b
    com.badlogic.gdx.utils.Scaling contain -> c
    com.badlogic.gdx.utils.Scaling fill -> d
    com.badlogic.gdx.utils.Scaling fillX -> e
    com.badlogic.gdx.utils.Scaling fillY -> f
    com.badlogic.gdx.utils.Scaling stretch -> g
    com.badlogic.gdx.utils.Scaling stretchX -> h
    com.badlogic.gdx.utils.Scaling stretchY -> i
    com.badlogic.gdx.utils.Scaling none -> j
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    com.badlogic.gdx.math.Vector2 apply(float,float,float,float) -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Lt/j;"}
com.badlogic.gdx.utils.Scaling$1 -> w.p$a:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Lt/j;"}
com.badlogic.gdx.utils.Scaling$2 -> w.p$b:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Lt/j;"}
com.badlogic.gdx.utils.Scaling$3 -> w.p$c:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Lt/j;"}
com.badlogic.gdx.utils.Scaling$4 -> w.p$d:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Lt/j;"}
com.badlogic.gdx.utils.Scaling$5 -> w.p$e:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Lt/j;"}
com.badlogic.gdx.utils.Scaling$6 -> w.p$f:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Lt/j;"}
com.badlogic.gdx.utils.Scaling$7 -> w.p$g:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Lt/j;"}
com.badlogic.gdx.utils.Scaling$8 -> w.p$h:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Lt/j;"}
com.badlogic.gdx.utils.Scaling$9 -> w.p$i:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Lt/j;"}
com.badlogic.gdx.utils.SerializationException -> w.q:
    com.badlogic.gdx.utils.StringBuilder trace -> d
    1:1:void <init>(java.lang.String):0:0 -> <init>
    2:2:void <init>(java.lang.String,java.lang.Throwable):0:0 -> <init>
    3:3:void <init>(java.lang.Throwable):0:0 -> <init>
    1:1:java.lang.String getMessage():0:0 -> getMessage
com.badlogic.gdx.utils.SharedLibraryLoadRuntimeException -> w.r:
    1:1:void <init>(java.lang.String):0:0 -> <init>
    2:2:void <init>(java.lang.String,java.lang.Throwable):0:0 -> <init>
    3:3:void <init>(java.lang.Throwable):0:0 -> <init>
com.badlogic.gdx.utils.SharedLibraryLoader -> w.s:
    java.lang.String nativesJar -> a
    boolean isWindows -> b
    boolean isLinux -> c
    boolean isMac -> d
    boolean isIos -> e
    boolean isAndroid -> f
    boolean isARM -> g
    boolean is64Bit -> h
    java.util.HashSet loadedLibraries -> i
    java.util.Random random -> j
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:void closeQuietly(java.io.Closeable):0:0 -> a
    1:1:java.lang.String crc(java.io.InputStream):0:0 -> b
    1:1:java.io.File extractFile(java.lang.String,java.lang.String,java.io.File):0:0 -> c
    1:1:boolean isLoaded(java.lang.String):0:0 -> d
    1:1:void load(java.lang.String):0:0 -> e
    1:1:java.lang.Throwable loadFile(java.lang.String,java.lang.String,java.io.File):0:0 -> f
    1:1:void loadFile(java.lang.String):0:0 -> g
    1:1:java.lang.String mapLibraryName(java.lang.String):0:0 -> h
    1:1:java.io.InputStream readFile(java.lang.String):0:0 -> i
    1:1:void setLoaded(java.lang.String):0:0 -> j
com.badlogic.gdx.utils.SnapshotArray -> w.t:
    java.lang.Object[] snapshot -> h
    java.lang.Object[] recycled -> i
    int snapshots -> j
    1:1:void <init>(java.lang.Class):0:0 -> <init>
    1:1:void clear():0:0 -> clear
    1:1:java.lang.Object pop():0:0 -> h
    1:1:java.lang.Object removeIndex(int):0:0 -> i
    1:1:boolean removeValue(java.lang.Object,boolean):0:0 -> j
    1:1:java.lang.Object[] begin():0:0 -> l
    1:1:void end():0:0 -> m
    1:1:void modified():0:0 -> n
com.badlogic.gdx.utils.StreamUtils -> w.u:
    byte[] EMPTY_BYTES -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void closeQuietly(java.io.Closeable):0:0 -> a
    1:1:void copyStream(java.io.InputStream,java.io.OutputStream):0:0 -> b
    1:1:void copyStream(java.io.InputStream,java.io.OutputStream,byte[]):0:0 -> c
    1:1:byte[] copyStreamToByteArray(java.io.InputStream,int):0:0 -> d
com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream -> w.u$a:
    1:1:void <init>(int):0:0 -> <init>
    1:1:byte[] toByteArray():0:0 -> toByteArray
com.badlogic.gdx.utils.StringBuilder -> w.v:
    char[] chars -> a
    int length -> b
    char[] digits -> c
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(int):0:0 -> <init>
    1:1:com.badlogic.gdx.utils.StringBuilder append(char):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(C)Lw/v;"}
    1:1:java.lang.Appendable append(char):0:0 -> append
    2:2:java.lang.Appendable append(java.lang.CharSequence):0:0 -> append
    3:3:java.lang.Appendable append(java.lang.CharSequence,int,int):0:0 -> append
    1:1:com.badlogic.gdx.utils.StringBuilder append(int):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(I)Lw/v;"}
    1:1:com.badlogic.gdx.utils.StringBuilder append(int,int):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(II)Lw/v;"}
    1:1:char charAt(int):0:0 -> charAt
    1:1:com.badlogic.gdx.utils.StringBuilder append(int,int,char):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(IIC)Lw/v;"}
    1:1:com.badlogic.gdx.utils.StringBuilder append(java.lang.CharSequence):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/CharSequence;)Lw/v;"}
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:com.badlogic.gdx.utils.StringBuilder append(java.lang.CharSequence,int,int):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/CharSequence;II)Lw/v;"}
    1:1:com.badlogic.gdx.utils.StringBuilder append(java.lang.Object):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Object;)Lw/v;"}
    1:1:com.badlogic.gdx.utils.StringBuilder append(java.lang.String):0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lw/v;"}
    1:1:int hashCode():0:0 -> hashCode
    1:1:com.badlogic.gdx.utils.StringBuilder append(com.badlogic.gdx.utils.StringBuilder):0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/v;)Lw/v;"}
    1:1:com.badlogic.gdx.utils.StringBuilder append(char[],int,int):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"([CII)Lw/v;"}
    1:1:void append0(char):0:0 -> k
    1:1:void append0(java.lang.CharSequence,int,int):0:0 -> l
    1:1:int length():0:0 -> length
    1:1:void append0(java.lang.String):0:0 -> m
    1:1:void append0(char[],int,int):0:0 -> n
    1:1:void appendNull():0:0 -> o
    1:1:void enlargeBuffer(int):0:0 -> p
    1:1:int numChars(int,int):0:0 -> q
    1:1:void setLength(int):0:0 -> r
    1:1:java.lang.String substring(int,int):0:0 -> s
    1:1:java.lang.CharSequence subSequence(int,int):0:0 -> subSequence
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.TimeUtils -> w.w:
    1:1:long millis():0:0 -> a
com.badlogic.gdx.utils.XmlReader -> w.x:
    com.badlogic.gdx.utils.Array elements -> a
    com.badlogic.gdx.utils.XmlReader$Element root -> b
    com.badlogic.gdx.utils.XmlReader$Element current -> c
    com.badlogic.gdx.utils.StringBuilder textBuffer -> d
    java.lang.String entitiesText -> e
    byte[] _xml_actions -> f
    byte[] _xml_key_offsets -> g
    char[] _xml_trans_keys -> h
    byte[] _xml_single_lengths -> i
    byte[] _xml_range_lengths -> j
    short[] _xml_index_offsets -> k
    byte[] _xml_indicies -> l
    byte[] _xml_trans_targs -> m
    byte[] _xml_trans_actions -> n
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    1:1:void attribute(java.lang.String,java.lang.String):0:0 -> a
    1:1:void close():0:0 -> b
    1:1:java.lang.String entity(java.lang.String):0:0 -> c
    1:1:byte[] init__xml_actions_0():0:0 -> d
    1:1:short[] init__xml_index_offsets_0():0:0 -> e
    1:1:byte[] init__xml_indicies_0():0:0 -> f
    1:1:byte[] init__xml_key_offsets_0():0:0 -> g
    1:1:byte[] init__xml_range_lengths_0():0:0 -> h
    1:1:byte[] init__xml_single_lengths_0():0:0 -> i
    1:1:byte[] init__xml_trans_actions_0():0:0 -> j
    1:1:char[] init__xml_trans_keys_0():0:0 -> k
    1:1:byte[] init__xml_trans_targs_0():0:0 -> l
    1:1:void open(java.lang.String):0:0 -> m
    1:1:com.badlogic.gdx.utils.XmlReader$Element parse(com.badlogic.gdx.files.FileHandle):0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lj/a;)Lw/x$a;"}
    1:1:com.badlogic.gdx.utils.XmlReader$Element parse(java.io.Reader):0:0 -> o
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/io/Reader;)Lw/x$a;"}
    1:1:com.badlogic.gdx.utils.XmlReader$Element parse(char[],int,int):0:0 -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"([CII)Lw/x$a;"}
    1:1:void text(java.lang.String):0:0 -> q
com.badlogic.gdx.utils.XmlReader$Element -> w.x$a:
    java.lang.String name -> a
    com.badlogic.gdx.utils.ObjectMap attributes -> b
    com.badlogic.gdx.utils.Array children -> c
    java.lang.String text -> d
    com.badlogic.gdx.utils.XmlReader$Element parent -> e
    1:1:void <init>(java.lang.String,com.badlogic.gdx.utils.XmlReader$Element):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;Lw/x$a;)V"}
    1:1:void addChild(com.badlogic.gdx.utils.XmlReader$Element):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/x$a;)V"}
    1:1:java.lang.String get(java.lang.String,java.lang.String):0:0 -> b
    1:1:java.lang.String getAttribute(java.lang.String):0:0 -> c
    1:1:java.lang.String getAttribute(java.lang.String,java.lang.String):0:0 -> d
    1:1:com.badlogic.gdx.utils.XmlReader$Element getChild(int):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(I)Lw/x$a;"}
    1:1:com.badlogic.gdx.utils.XmlReader$Element getChildByName(java.lang.String):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lw/x$a;"}
    1:1:int getChildCount():0:0 -> g
    1:1:com.badlogic.gdx.utils.Array getChildrenByName(java.lang.String):0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lw/a;"}
    1:1:float getFloatAttribute(java.lang.String,float):0:0 -> i
    1:1:int getIntAttribute(java.lang.String):0:0 -> j
    1:1:int getIntAttribute(java.lang.String,int):0:0 -> k
    1:1:java.lang.String getName():0:0 -> l
    1:1:java.lang.String getText():0:0 -> m
    1:1:boolean hasAttribute(java.lang.String):0:0 -> n
    1:1:void removeChild(com.badlogic.gdx.utils.XmlReader$Element):0:0 -> o
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/x$a;)V"}
    1:1:void setAttribute(java.lang.String,java.lang.String):0:0 -> p
    1:1:void setText(java.lang.String):0:0 -> q
    1:1:java.lang.String toString(java.lang.String):0:0 -> r
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.reflect.ArrayReflection -> x.a:
    1:1:java.lang.Object newInstance(java.lang.Class,int):0:0 -> a
com.badlogic.gdx.utils.reflect.ClassReflection -> x.b:
    1:1:boolean isInstance(java.lang.Class,java.lang.Object):0:0 -> a
com.badlogic.gdx.utils.viewport.FitViewport -> y.a:
    1:1:void <init>(float,float,com.badlogic.gdx.graphics.Camera):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFLk/a;)V"}
com.badlogic.gdx.utils.viewport.ScalingViewport -> y.b:
    com.badlogic.gdx.utils.Scaling scaling -> i
    1:1:void <init>(com.badlogic.gdx.utils.Scaling,float,float,com.badlogic.gdx.graphics.Camera):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lw/p;FFLk/a;)V"}
    1:1:void update(int,int,boolean):0:0 -> h
com.badlogic.gdx.utils.viewport.Viewport -> y.c:
    com.badlogic.gdx.graphics.Camera camera -> a
    float worldWidth -> b
    float worldHeight -> c
    int screenX -> d
    int screenY -> e
    int screenWidth -> f
    int screenHeight -> g
    com.badlogic.gdx.math.Vector3 tmp -> h
    1:1:void <init>():0:0 -> <init>
    1:1:void apply(boolean):0:0 -> a
    1:1:float getWorldHeight():0:0 -> b
    1:1:float getWorldWidth():0:0 -> c
    1:1:void setCamera(com.badlogic.gdx.graphics.Camera):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/a;)V"}
    1:1:void setScreenBounds(int,int,int,int):0:0 -> e
    1:1:void setWorldSize(float,float):0:0 -> f
    1:1:void update(int,int):0:0 -> g
    void update(int,int,boolean) -> h
com.tasteoftranquility.game.Main -> z.a:
    float unitScale -> b
    float gameWidth -> c
    float gameHeight -> d
    1:1:void <init>():0:0 -> <init>
    1:1:void resume():0:0 -> a
    1:1:void pause():0:0 -> b
    1:1:void dispose():0:0 -> c
    1:1:void resize(int,int):0:0 -> d
    1:1:void create():0:0 -> e
com.tasteoftranquility.game.screens.BaseScreen -> a0.a:
    com.badlogic.gdx.Game game -> a
    1:1:void <init>(com.badlogic.gdx.Game):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/h;)V"}
com.tasteoftranquility.game.screens.PlayGameScreen -> a0.b:
    com.tasteoftranquility.game.systems.MapR mapR -> b
    com.badlogic.gdx.graphics.OrthographicCamera camera -> c
    com.badlogic.gdx.utils.viewport.Viewport viewport -> d
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> e
    com.tasteoftranquility.game.Main main -> f
    float unitScale -> g
    1:1:void <init>(com.badlogic.gdx.Game):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/h;)V"}
    1:1:void resume():0:0 -> a
    1:1:void pause():0:0 -> b
    1:1:void render(float):0:0 -> c
    1:1:void resize(int,int):0:0 -> d
    1:1:void hide():0:0 -> e
    1:1:void show():0:0 -> f
    1:1:void draw():0:0 -> g
    1:1:void update():0:0 -> h
com.tasteoftranquility.game.systems.MapR -> b0.a:
    com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer renderer -> a
    com.badlogic.gdx.maps.tiled.TiledMap map -> b
    float unitScale -> c
    1:1:void <init>(float):0:0 -> <init>
    1:1:void render(com.badlogic.gdx.graphics.OrthographicCamera):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/h;)V"}
kotlin.ExceptionsKt -> c0.a:
    1:1:void addSuppressed(java.lang.Throwable,java.lang.Throwable):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
kotlin.ExceptionsKt__ExceptionsKt -> c0.b:
    1:1:void addSuppressed(java.lang.Throwable,java.lang.Throwable):0:0 -> a
kotlin.KotlinNothingValueException -> c0.c:
    void <init>() -> <init>
kotlin.Result -> c0.d:
    kotlin.Result$Companion Companion -> d
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:java.lang.Object constructor-impl(java.lang.Object):0:0 -> a
    1:1:boolean isFailure-impl(java.lang.Object):0:0 -> b
    1:1:boolean isSuccess-impl(java.lang.Object):0:0 -> c
kotlin.Result$Companion -> c0.d$a:
    void <init>() -> <init>
    1:1:void <init>(kotlin.jvm.internal.DefaultConstructorMarker):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk0/b;)V"}
kotlin.Result$Failure -> c0.d$b:
    java.lang.Throwable exception -> d
    1:1:void <init>(java.lang.Throwable):0:0 -> <init>
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.String toString():0:0 -> toString
kotlin.ResultKt -> c0.e:
    1:1:java.lang.Object createFailure(java.lang.Throwable):0:0 -> a
kotlin.Unit -> c0.f:
    kotlin.Unit INSTANCE -> a
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:java.lang.String toString():0:0 -> toString
kotlin.collections.ArraysKt -> d0.a:
    1:1:char single(char[]):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
    1:1:java.lang.Object singleOrNull(java.lang.Object[]):0:0 -> b
      # {"id":"com.android.tools.r8.synthesized"}
kotlin.collections.ArraysKt__ArraysJVMKt -> d0.b:
kotlin.collections.ArraysKt__ArraysKt -> d0.c:
kotlin.collections.ArraysKt___ArraysJvmKt -> d0.d:
kotlin.collections.ArraysKt___ArraysKt -> d0.e:
    1:1:char single(char[]):0:0 -> a
    1:1:java.lang.Object singleOrNull(java.lang.Object[]):0:0 -> b
kotlin.collections.CollectionsKt -> d0.f:
    1:1:java.util.List optimizeReadOnlyList(java.util.List):0:0 -> c
      # {"id":"com.android.tools.r8.synthesized"}
    1:1:int collectionSizeOrDefault(java.lang.Iterable,int):0:0 -> d
      # {"id":"com.android.tools.r8.synthesized"}
    1:1:boolean addAll(java.util.Collection,java.lang.Iterable):0:0 -> e
      # {"id":"com.android.tools.r8.synthesized"}
    1:1:java.util.List toList(java.lang.Iterable):0:0 -> g
      # {"id":"com.android.tools.r8.synthesized"}
    1:1:java.util.Set toSet(java.lang.Iterable):0:0 -> j
      # {"id":"com.android.tools.r8.synthesized"}
kotlin.collections.CollectionsKt__CollectionsJVMKt -> d0.g:
    1:1:java.util.List listOf(java.lang.Object):0:0 -> a
kotlin.collections.CollectionsKt__CollectionsKt -> d0.h:
    1:1:java.util.List emptyList():0:0 -> b
    1:1:java.util.List optimizeReadOnlyList(java.util.List):0:0 -> c
kotlin.collections.CollectionsKt__IterablesKt -> d0.i:
    1:1:int collectionSizeOrDefault(java.lang.Iterable,int):0:0 -> d
kotlin.collections.CollectionsKt__IteratorsJVMKt -> d0.j:
kotlin.collections.CollectionsKt__IteratorsKt -> d0.k:
kotlin.collections.CollectionsKt__MutableCollectionsJVMKt -> d0.l:
kotlin.collections.CollectionsKt__MutableCollectionsKt -> d0.m:
    1:1:boolean addAll(java.util.Collection,java.lang.Iterable):0:0 -> e
kotlin.collections.CollectionsKt__ReversedViewsKt -> d0.n:
kotlin.collections.CollectionsKt___CollectionsJvmKt -> d0.o:
kotlin.collections.CollectionsKt___CollectionsKt -> d0.p:
    1:1:java.util.Collection toCollection(java.lang.Iterable,java.util.Collection):0:0 -> f
    1:1:java.util.List toList(java.lang.Iterable):0:0 -> g
    1:1:java.util.List toMutableList(java.lang.Iterable):0:0 -> h
    1:1:java.util.List toMutableList(java.util.Collection):0:0 -> i
    1:1:java.util.Set toSet(java.lang.Iterable):0:0 -> j
kotlin.collections.EmptyIterator -> d0.q:
    kotlin.collections.EmptyIterator INSTANCE -> d
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:java.lang.Void next():0:0 -> a
    1:1:void add(java.lang.Object):0:0 -> add
    1:1:java.lang.Void previous():0:0 -> b
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:boolean hasPrevious():0:0 -> hasPrevious
    1:1:java.lang.Object next():0:0 -> next
    1:1:int nextIndex():0:0 -> nextIndex
    1:1:java.lang.Object previous():0:0 -> previous
    1:1:int previousIndex():0:0 -> previousIndex
    1:1:void remove():0:0 -> remove
    1:1:void set(java.lang.Object):0:0 -> set
kotlin.collections.EmptyList -> d0.r:
    kotlin.collections.EmptyList INSTANCE -> d
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:boolean contains(java.lang.Void):0:0 -> a
    1:1:void add(int,java.lang.Object):0:0 -> add
    2:2:boolean add(java.lang.Object):0:0 -> add
    1:1:boolean addAll(int,java.util.Collection):0:0 -> addAll
    2:2:boolean addAll(java.util.Collection):0:0 -> addAll
    1:1:java.lang.Void get(int):0:0 -> b
    1:1:int getSize():0:0 -> c
    1:1:void clear():0:0 -> clear
    1:1:boolean contains(java.lang.Object):0:0 -> contains
    1:1:boolean containsAll(java.util.Collection):0:0 -> containsAll
    1:1:int indexOf(java.lang.Void):0:0 -> d
    1:1:int lastIndexOf(java.lang.Void):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:java.lang.Object get(int):0:0 -> get
    1:1:int hashCode():0:0 -> hashCode
    1:1:int indexOf(java.lang.Object):0:0 -> indexOf
    1:1:boolean isEmpty():0:0 -> isEmpty
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:int lastIndexOf(java.lang.Object):0:0 -> lastIndexOf
    1:1:java.util.ListIterator listIterator():0:0 -> listIterator
    2:2:java.util.ListIterator listIterator(int):0:0 -> listIterator
    1:1:java.lang.Object remove(int):0:0 -> remove
    2:2:boolean remove(java.lang.Object):0:0 -> remove
    1:1:boolean removeAll(java.util.Collection):0:0 -> removeAll
    1:1:boolean retainAll(java.util.Collection):0:0 -> retainAll
    1:1:java.lang.Object set(int,java.lang.Object):0:0 -> set
    1:1:int size():0:0 -> size
    1:1:java.util.List subList(int,int):0:0 -> subList
    1:1:java.lang.Object[] toArray():0:0 -> toArray
    2:2:java.lang.Object[] toArray(java.lang.Object[]):0:0 -> toArray
    1:1:java.lang.String toString():0:0 -> toString
kotlin.collections.EmptySet -> d0.s:
    kotlin.collections.EmptySet INSTANCE -> d
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:boolean contains(java.lang.Void):0:0 -> a
    1:1:boolean add(java.lang.Object):0:0 -> add
    1:1:boolean addAll(java.util.Collection):0:0 -> addAll
    1:1:int getSize():0:0 -> b
    1:1:void clear():0:0 -> clear
    1:1:boolean contains(java.lang.Object):0:0 -> contains
    1:1:boolean containsAll(java.util.Collection):0:0 -> containsAll
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:boolean isEmpty():0:0 -> isEmpty
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:boolean remove(java.lang.Object):0:0 -> remove
    1:1:boolean removeAll(java.util.Collection):0:0 -> removeAll
    1:1:boolean retainAll(java.util.Collection):0:0 -> retainAll
    1:1:int size():0:0 -> size
    1:1:java.lang.Object[] toArray():0:0 -> toArray
    2:2:java.lang.Object[] toArray(java.lang.Object[]):0:0 -> toArray
    1:1:java.lang.String toString():0:0 -> toString
kotlin.collections.IntIterator -> d0.t:
    void <init>() -> <init>
    int nextInt() -> a
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
kotlin.collections.MapsKt__MapWithDefaultKt -> d0.u:
kotlin.collections.MapsKt__MapsJVMKt -> d0.v:
    1:1:int mapCapacity(int):0:0 -> a
kotlin.collections.SetsKt__SetsJVMKt -> d0.w:
    1:1:java.util.Set setOf(java.lang.Object):0:0 -> a
kotlin.collections.SetsKt__SetsKt -> d0.x:
    1:1:java.util.Set emptySet():0:0 -> b
    1:1:java.util.Set optimizeReadOnlySet(java.util.Set):0:0 -> c
kotlin.coroutines.AbstractCoroutineContextElement -> e0.a:
    1:1:void <init>(kotlin.coroutines.CoroutineContext$Key):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$c;)V"}
    1:1:java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2):0:0 -> fold
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Object;Lj0/b;)Ljava/lang/Object;"}
    1:1:kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key):0:0 -> get
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$c;)Le0/e$b;"}
    1:1:kotlin.coroutines.CoroutineContext$Key getKey():0:0 -> getKey
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Le0/e$c;"}
    1:1:kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key):0:0 -> minusKey
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$c;)Le0/e;"}
    1:1:kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext):0:0 -> plus
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;)Le0/e;"}
kotlin.coroutines.AbstractCoroutineContextKey -> e0.b:
    kotlin.jvm.functions.Function1 safeCast -> a
    kotlin.coroutines.CoroutineContext$Key topmostKey -> b
    1:1:void <init>(kotlin.coroutines.CoroutineContext$Key,kotlin.jvm.functions.Function1):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$c;Lj0/a;)V"}
    1:1:boolean isSubKey$kotlin_stdlib(kotlin.coroutines.CoroutineContext$Key):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$c;)Z"}
    1:1:kotlin.coroutines.CoroutineContext$Element tryCast$kotlin_stdlib(kotlin.coroutines.CoroutineContext$Element):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$b;)Le0/e$b;"}
kotlin.coroutines.CombinedContext -> e0.c:
    kotlin.coroutines.CoroutineContext left -> d
    kotlin.coroutines.CoroutineContext$Element element -> e
    1:1:void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Le0/e$b;)V"}
    1:1:boolean contains(kotlin.coroutines.CoroutineContext$Element):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$b;)Z"}
    1:1:boolean containsAll(kotlin.coroutines.CombinedContext):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/c;)Z"}
    1:1:int size():0:0 -> c
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2):0:0 -> fold
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Object;Lj0/b;)Ljava/lang/Object;"}
    1:1:kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key):0:0 -> get
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$c;)Le0/e$b;"}
    1:1:int hashCode():0:0 -> hashCode
    1:1:kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key):0:0 -> minusKey
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$c;)Le0/e;"}
    1:1:java.lang.String toString():0:0 -> toString
kotlin.coroutines.CombinedContext$toString$1 -> e0.c$a:
    kotlin.coroutines.CombinedContext$toString$1 INSTANCE -> e
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    1:1:java.lang.Object invoke(java.lang.Object,java.lang.Object):0:0 -> b
    1:1:java.lang.String invoke(java.lang.String,kotlin.coroutines.CoroutineContext$Element):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;Le0/e$b;)Ljava/lang/String;"}
kotlin.coroutines.ContinuationInterceptor -> e0.d:
    kotlin.coroutines.ContinuationInterceptor$Key Key -> a
    1:1:void <clinit>():0:0 -> <clinit>
kotlin.coroutines.ContinuationInterceptor$DefaultImpls -> e0.d$a:
    1:1:kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.CoroutineContext$Key):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/d;Le0/e$c;)Le0/e$b;"}
    1:1:kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.CoroutineContext$Key):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/d;Le0/e$c;)Le0/e;"}
kotlin.coroutines.ContinuationInterceptor$Key -> e0.d$b:
    kotlin.coroutines.ContinuationInterceptor$Key $$INSTANCE -> a
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
kotlin.coroutines.CoroutineContext -> e0.e:
    java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2) -> fold
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Object;Lj0/b;)Ljava/lang/Object;"}
    kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key) -> get
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$c;)Le0/e$b;"}
    kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key) -> minusKey
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$c;)Le0/e;"}
kotlin.coroutines.CoroutineContext$DefaultImpls -> e0.e$a:
    1:1:kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Le0/e;)Le0/e;"}
kotlin.coroutines.CoroutineContext$Element -> e0.e$b:
    kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key) -> get
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$c;)Le0/e$b;"}
    kotlin.coroutines.CoroutineContext$Key getKey() -> getKey
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Le0/e$c;"}
kotlin.coroutines.CoroutineContext$Element$DefaultImpls -> e0.e$b$a:
    1:1:java.lang.Object fold(kotlin.coroutines.CoroutineContext$Element,java.lang.Object,kotlin.jvm.functions.Function2):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$b;Ljava/lang/Object;Lj0/b;)Ljava/lang/Object;"}
    1:1:kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$b;Le0/e$c;)Le0/e$b;"}
    1:1:kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$b;Le0/e$c;)Le0/e;"}
    1:1:kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$b;Le0/e;)Le0/e;"}
kotlin.coroutines.CoroutineContext$Key -> e0.e$c:
kotlin.coroutines.CoroutineContext$plus$1 -> e0.e$a$a:
    kotlin.coroutines.CoroutineContext$plus$1 INSTANCE -> e
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    1:1:java.lang.Object invoke(java.lang.Object,java.lang.Object):0:0 -> b
    1:1:kotlin.coroutines.CoroutineContext invoke(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Le0/e$b;)Le0/e;"}
kotlin.coroutines.EmptyCoroutineContext -> e0.f:
    kotlin.coroutines.EmptyCoroutineContext INSTANCE -> d
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2):0:0 -> fold
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Object;Lj0/b;)Ljava/lang/Object;"}
    1:1:kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key):0:0 -> get
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$c;)Le0/e$b;"}
    1:1:int hashCode():0:0 -> hashCode
    1:1:kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key):0:0 -> minusKey
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$c;)Le0/e;"}
    1:1:java.lang.String toString():0:0 -> toString
kotlin.internal.PlatformImplementations -> f0.a:
    void <init>() -> <init>
    1:1:void addSuppressed(java.lang.Throwable,java.lang.Throwable):0:0 -> a
    1:1:kotlin.random.Random defaultPlatformRandom():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll0/c;"}
kotlin.internal.PlatformImplementations$ReflectThrowable -> f0.a$a:
    kotlin.internal.PlatformImplementations$ReflectThrowable INSTANCE -> a
    java.lang.reflect.Method addSuppressed -> b
    java.lang.reflect.Method getSuppressed -> c
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
kotlin.internal.PlatformImplementationsKt -> f0.b:
    kotlin.internal.PlatformImplementations IMPLEMENTATIONS -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:int getJavaVersion():0:0 -> a
kotlin.internal.ProgressionUtilKt -> f0.c:
    1:1:int differenceModulo(int,int,int):0:0 -> a
    1:1:int getProgressionLastElement(int,int,int):0:0 -> b
    1:1:int mod(int,int):0:0 -> c
kotlin.internal.jdk7.JDK7PlatformImplementations -> g0.b:
    void <init>() -> <init>
    1:1:void addSuppressed(java.lang.Throwable,java.lang.Throwable):0:0 -> a
kotlin.internal.jdk7.JDK7PlatformImplementations$$ExternalSyntheticBackport0 -> g0.a:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:void kotlin.internal.jdk7.JDK7PlatformImplementations$$InternalSyntheticBackport$1$5dd1ba9cbabf516c5421f68beb3d2c44b2f996bdb40194921c2a266ab2276b61$0.m(java.lang.Throwable,java.lang.Throwable):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
kotlin.internal.jdk8.JDK8PlatformImplementations -> h0.a:
    void <init>() -> <init>
    1:1:kotlin.random.Random defaultPlatformRandom():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll0/c;"}
kotlin.io.CloseableKt -> i0.a:
    1:1:void closeFinally(java.io.Closeable,java.lang.Throwable):0:0 -> a
kotlin.jvm.functions.Function1 -> j0.a:
    java.lang.Object invoke(java.lang.Object) -> a
kotlin.jvm.functions.Function2 -> j0.b:
    java.lang.Object invoke(java.lang.Object,java.lang.Object) -> b
kotlin.jvm.internal.CollectionToArray -> k0.a:
    java.lang.Object[] EMPTY -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:java.lang.Object[] toArray(java.util.Collection):0:0 -> a
    1:1:java.lang.Object[] toArray(java.util.Collection,java.lang.Object[]):0:0 -> b
kotlin.jvm.internal.DefaultConstructorMarker -> k0.b:
kotlin.jvm.internal.FunctionBase -> k0.c:
kotlin.jvm.internal.Intrinsics -> k0.d:
    1:1:boolean areEqual(java.lang.Object,java.lang.Object):0:0 -> a
    1:1:void checkNotNull(java.lang.Object):0:0 -> b
    1:1:void checkNotNullExpressionValue(java.lang.Object,java.lang.String):0:0 -> c
    1:1:void checkNotNullParameter(java.lang.Object,java.lang.String):0:0 -> d
    1:1:int compare(int,int):0:0 -> e
    1:1:java.lang.String createParameterIsNullExceptionMessage(java.lang.String):0:0 -> f
    1:1:java.lang.Throwable sanitizeStackTrace(java.lang.Throwable):0:0 -> g
    1:1:java.lang.Throwable sanitizeStackTrace(java.lang.Throwable,java.lang.String):0:0 -> h
    1:1:java.lang.String stringPlus(java.lang.String,java.lang.Object):0:0 -> i
    1:1:void throwJavaNpe():0:0 -> j
    1:1:void throwParameterIsNullNPE(java.lang.String):0:0 -> k
kotlin.jvm.internal.Lambda -> k0.e:
    int arity -> d
    1:1:void <init>(int):0:0 -> <init>
    1:1:java.lang.String toString():0:0 -> toString
kotlin.jvm.internal.Reflection -> k0.f:
    kotlin.jvm.internal.ReflectionFactory factory -> a
    kotlin.reflect.KClass[] EMPTY_K_CLASS_ARRAY -> b
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:java.lang.String renderLambdaToString(kotlin.jvm.internal.Lambda):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk0/e;)Ljava/lang/String;"}
kotlin.jvm.internal.ReflectionFactory -> k0.g:
    void <init>() -> <init>
    1:1:java.lang.String renderLambdaToString(kotlin.jvm.internal.FunctionBase):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk0/c;)Ljava/lang/String;"}
    1:1:java.lang.String renderLambdaToString(kotlin.jvm.internal.Lambda):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk0/e;)Ljava/lang/String;"}
kotlin.random.AbstractPlatformRandom -> l0.a:
    void <init>() -> <init>
    1:1:int nextInt():0:0 -> b
    java.util.Random getImpl() -> c
kotlin.random.FallbackThreadLocalRandom -> l0.b:
    kotlin.random.FallbackThreadLocalRandom$implStorage$1 implStorage -> f
    1:1:void <init>():0:0 -> <init>
    1:1:java.util.Random getImpl():0:0 -> c
kotlin.random.FallbackThreadLocalRandom$implStorage$1 -> l0.b$a:
    void <init>() -> <init>
    1:1:java.util.Random initialValue():0:0 -> a
    1:1:java.lang.Object initialValue():0:0 -> initialValue
kotlin.random.Random -> l0.c:
    kotlin.random.Random$Default Default -> d
    kotlin.random.Random defaultRandom -> e
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:kotlin.random.Random access$getDefaultRandom$cp():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll0/c;"}
    int nextInt() -> b
kotlin.random.Random$Default -> l0.c$a:
    void <init>() -> <init>
    1:1:void <init>(kotlin.jvm.internal.DefaultConstructorMarker):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk0/b;)V"}
    1:1:int nextInt():0:0 -> b
kotlin.random.jdk8.PlatformThreadLocalRandom -> m0.b:
    void <init>() -> <init>
    1:1:java.util.Random getImpl():0:0 -> c
kotlin.random.jdk8.PlatformThreadLocalRandom$$ExternalSyntheticApiModelOutline0 -> m0.a:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:java.util.concurrent.ThreadLocalRandom kotlin.random.jdk8.PlatformThreadLocalRandom$$InternalSyntheticApiModelOutline$1$351c4b53f07f843823241e82aa729b8cd7f7abd8e0594711c18979b36a95a5e9$0.m():0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
kotlin.ranges.IntProgression -> n0.a:
    int first -> d
    int last -> e
    int step -> f
    kotlin.ranges.IntProgression$Companion Companion -> g
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(int,int,int):0:0 -> <init>
    1:1:int getFirst():0:0 -> a
    1:1:int getLast():0:0 -> b
    1:1:int getStep():0:0 -> c
    1:1:kotlin.collections.IntIterator iterator():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ld0/t;"}
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:boolean isEmpty():0:0 -> isEmpty
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.String toString():0:0 -> toString
kotlin.ranges.IntProgression$Companion -> n0.a$a:
    void <init>() -> <init>
    1:1:void <init>(kotlin.jvm.internal.DefaultConstructorMarker):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk0/b;)V"}
    1:1:kotlin.ranges.IntProgression fromClosedRange(int,int,int):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(III)Ln0/a;"}
kotlin.ranges.IntProgressionIterator -> n0.b:
    int step -> d
    int finalElement -> e
    boolean hasNext -> f
    int next -> g
    1:1:void <init>(int,int,int):0:0 -> <init>
    1:1:int nextInt():0:0 -> a
    1:1:boolean hasNext():0:0 -> hasNext
kotlin.ranges.IntRange -> n0.c:
    kotlin.ranges.IntRange$Companion Companion -> h
    kotlin.ranges.IntRange EMPTY -> i
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(int,int):0:0 -> <init>
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:boolean isEmpty():0:0 -> isEmpty
    1:1:java.lang.String toString():0:0 -> toString
kotlin.ranges.IntRange$Companion -> n0.c$a:
    void <init>() -> <init>
    1:1:void <init>(kotlin.jvm.internal.DefaultConstructorMarker):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk0/b;)V"}
kotlin.ranges.RangesKt -> n0.d:
    1:1:int coerceAtLeast(int,int):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
    1:1:int coerceAtMost(int,int):0:0 -> b
      # {"id":"com.android.tools.r8.synthesized"}
    1:1:long coerceAtMost(long,long):0:0 -> c
      # {"id":"com.android.tools.r8.synthesized"}
    1:1:kotlin.ranges.IntProgression downTo(int,int):0:0 -> d
      # {"id":"com.android.tools.r8.synthesized"}
      # {"id":"com.android.tools.r8.residualsignature","signature":"(II)Ln0/a;"}
kotlin.ranges.RangesKt__RangesKt -> n0.e:
kotlin.ranges.RangesKt___RangesKt -> n0.f:
    1:1:int coerceAtLeast(int,int):0:0 -> a
    1:1:int coerceAtMost(int,int):0:0 -> b
    1:1:long coerceAtMost(long,long):0:0 -> c
    1:1:kotlin.ranges.IntProgression downTo(int,int):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(II)Ln0/a;"}
kotlin.reflect.KClass -> o0.a:
kotlin.sequences.ConstrainedOnceSequence -> p0.a:
    java.util.concurrent.atomic.AtomicReference sequenceRef -> a
    1:1:void <init>(kotlin.sequences.Sequence):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp0/b;)V"}
    1:1:java.util.Iterator iterator():0:0 -> iterator
kotlin.sequences.Sequence -> p0.b:
    java.util.Iterator iterator() -> iterator
kotlin.sequences.SequencesKt -> p0.c:
    1:1:kotlin.sequences.Sequence asSequence(java.util.Iterator):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/util/Iterator;)Lp0/b;"}
    1:1:java.util.List toList(kotlin.sequences.Sequence):0:0 -> d
      # {"id":"com.android.tools.r8.synthesized"}
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp0/b;)Ljava/util/List;"}
kotlin.sequences.SequencesKt__SequenceBuilderKt -> p0.d:
kotlin.sequences.SequencesKt__SequencesJVMKt -> p0.e:
kotlin.sequences.SequencesKt__SequencesKt -> p0.f:
    1:1:kotlin.sequences.Sequence asSequence(java.util.Iterator):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/util/Iterator;)Lp0/b;"}
    1:1:kotlin.sequences.Sequence constrainOnce(kotlin.sequences.Sequence):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp0/b;)Lp0/b;"}
kotlin.sequences.SequencesKt__SequencesKt$asSequence$$inlined$Sequence$1 -> p0.f$a:
    java.util.Iterator $this_asSequence$inlined -> a
    1:1:void <init>(java.util.Iterator):0:0 -> <init>
    1:1:java.util.Iterator iterator():0:0 -> iterator
kotlin.sequences.SequencesKt___SequencesJvmKt -> p0.g:
kotlin.sequences.SequencesKt___SequencesKt -> p0.h:
    1:1:java.util.Collection toCollection(kotlin.sequences.Sequence,java.util.Collection):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp0/b;Ljava/util/Collection;)Ljava/util/Collection;"}
    1:1:java.util.List toList(kotlin.sequences.Sequence):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp0/b;)Ljava/util/List;"}
    1:1:java.util.List toMutableList(kotlin.sequences.Sequence):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp0/b;)Ljava/util/List;"}
kotlin.text.CharsKt__CharJVMKt -> q0.a:
    1:1:int checkRadix(int):0:0 -> a
    1:1:int digitOf(char,int):0:0 -> b
    1:1:boolean isWhitespace(char):0:0 -> c
kotlin.text.CharsKt__CharKt -> q0.b:
    1:1:boolean equals(char,char,boolean):0:0 -> d
kotlin.text.StringsKt -> q0.c:
    1:1:java.lang.Long toLongOrNull(java.lang.String):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
    1:1:boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object):0:0 -> e
      # {"id":"com.android.tools.r8.synthesized"}
    1:1:int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object):0:0 -> k
      # {"id":"com.android.tools.r8.synthesized"}
    1:1:java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object):0:0 -> p
      # {"id":"com.android.tools.r8.synthesized"}
    1:1:java.lang.String substringBefore$default(java.lang.String,char,java.lang.String,int,java.lang.Object):0:0 -> s
      # {"id":"com.android.tools.r8.synthesized"}
    1:1:java.lang.String substringBefore$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object):0:0 -> t
      # {"id":"com.android.tools.r8.synthesized"}
    1:1:java.lang.CharSequence trim(java.lang.CharSequence):0:0 -> u
      # {"id":"com.android.tools.r8.synthesized"}
kotlin.text.StringsKt__AppendableKt -> q0.d:
kotlin.text.StringsKt__IndentKt -> q0.e:
kotlin.text.StringsKt__RegexExtensionsJVMKt -> q0.f:
kotlin.text.StringsKt__RegexExtensionsKt -> q0.g:
kotlin.text.StringsKt__StringBuilderJVMKt -> q0.h:
kotlin.text.StringsKt__StringBuilderKt -> q0.i:
kotlin.text.StringsKt__StringNumberConversionsJVMKt -> q0.j:
kotlin.text.StringsKt__StringNumberConversionsKt -> q0.k:
    1:1:java.lang.Long toLongOrNull(java.lang.String):0:0 -> a
    1:1:java.lang.Long toLongOrNull(java.lang.String,int):0:0 -> b
kotlin.text.StringsKt__StringsJVMKt -> q0.l:
    1:1:boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean):0:0 -> c
    1:1:boolean startsWith(java.lang.String,java.lang.String,boolean):0:0 -> d
    1:1:boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object):0:0 -> e
kotlin.text.StringsKt__StringsKt -> q0.m:
    1:1:int getLastIndex(java.lang.CharSequence):0:0 -> f
    1:1:int indexOf(java.lang.CharSequence,char,int,boolean):0:0 -> g
    1:1:int indexOf(java.lang.CharSequence,java.lang.String,int,boolean):0:0 -> h
    1:1:int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean):0:0 -> i
    1:1:int indexOf$StringsKt__StringsKt$default(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean,int,java.lang.Object):0:0 -> j
    1:1:int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object):0:0 -> k
    1:1:int indexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object):0:0 -> l
    1:1:int indexOfAny(java.lang.CharSequence,char[],int,boolean):0:0 -> m
    1:1:boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean):0:0 -> n
    1:1:java.lang.String substringAfter(java.lang.String,java.lang.String,java.lang.String):0:0 -> o
    1:1:java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object):0:0 -> p
    1:1:java.lang.String substringBefore(java.lang.String,char,java.lang.String):0:0 -> q
    1:1:java.lang.String substringBefore(java.lang.String,java.lang.String,java.lang.String):0:0 -> r
    1:1:java.lang.String substringBefore$default(java.lang.String,char,java.lang.String,int,java.lang.Object):0:0 -> s
    1:1:java.lang.String substringBefore$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object):0:0 -> t
    1:1:java.lang.CharSequence trim(java.lang.CharSequence):0:0 -> u
kotlin.text.StringsKt___StringsJvmKt -> q0.n:
kotlin.text.StringsKt___StringsKt -> q0.o:
kotlinx.coroutines.AbstractTimeSource -> r0.a:
kotlinx.coroutines.AbstractTimeSourceKt -> r0.b:
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:kotlinx.coroutines.AbstractTimeSource getTimeSource():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lr0/a;"}
kotlinx.coroutines.CoroutineDispatcher -> r0.c:
    kotlinx.coroutines.CoroutineDispatcher$Key Key -> d
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable) -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/lang/Runnable;)V"}
    1:1:boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;)Z"}
    1:1:kotlinx.coroutines.CoroutineDispatcher limitedParallelism(int):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(I)Lr0/c;"}
    1:1:kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key):0:0 -> get
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$c;)Le0/e$b;"}
    1:1:kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key):0:0 -> minusKey
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$c;)Le0/e;"}
    1:1:java.lang.String toString():0:0 -> toString
kotlinx.coroutines.CoroutineDispatcher$Key -> r0.c$a:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(kotlin.jvm.internal.DefaultConstructorMarker):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk0/b;)V"}
kotlinx.coroutines.CoroutineDispatcher$Key$1 -> r0.c$a$a:
    kotlinx.coroutines.CoroutineDispatcher$Key$1 INSTANCE -> e
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    1:1:java.lang.Object invoke(java.lang.Object):0:0 -> a
    1:1:kotlinx.coroutines.CoroutineDispatcher invoke(kotlin.coroutines.CoroutineContext$Element):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$b;)Lr0/c;"}
kotlinx.coroutines.CoroutineExceptionHandler -> r0.d:
    kotlinx.coroutines.CoroutineExceptionHandler$Key Key -> b
    1:1:void <clinit>():0:0 -> <clinit>
    void handleException(kotlin.coroutines.CoroutineContext,java.lang.Throwable) -> handleException
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/lang/Throwable;)V"}
kotlinx.coroutines.CoroutineExceptionHandler$Key -> r0.d$a:
    kotlinx.coroutines.CoroutineExceptionHandler$Key $$INSTANCE -> a
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
kotlinx.coroutines.CoroutineExceptionHandlerImplKt -> r0.e:
    java.util.List handlers -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void handleCoroutineExceptionImpl(kotlin.coroutines.CoroutineContext,java.lang.Throwable):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/lang/Throwable;)V"}
kotlinx.coroutines.CoroutineExceptionHandlerKt -> r0.f:
    1:1:void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/lang/Throwable;)V"}
    1:1:java.lang.Throwable handlerException(java.lang.Throwable,java.lang.Throwable):0:0 -> b
kotlinx.coroutines.DebugStringsKt -> r0.g:
    1:1:java.lang.String getClassSimpleName(java.lang.Object):0:0 -> a
    1:1:java.lang.String getHexAddress(java.lang.Object):0:0 -> b
kotlinx.coroutines.DefaultExecutor -> r0.h:
    kotlinx.coroutines.DefaultExecutor INSTANCE -> i
    long KEEP_ALIVE_NANOS -> j
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:java.lang.Thread getThread():0:0 -> j
    1:1:void enqueue(java.lang.Runnable):0:0 -> m
    1:1:void run():0:0 -> run
    1:1:void acknowledgeShutdownIfNeeded():0:0 -> s
    1:1:java.lang.Thread createThreadSync():0:0 -> t
    1:1:boolean isShutDown():0:0 -> u
    1:1:boolean isShutdownRequested():0:0 -> v
    1:1:boolean notifyStartup():0:0 -> w
    1:1:void shutdownError():0:0 -> x
kotlinx.coroutines.DefaultExecutorKt -> r0.i:
    boolean defaultMainDelayOptIn -> a
    kotlinx.coroutines.Delay DefaultDelay -> b
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:kotlinx.coroutines.Delay getDefaultDelay():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lr0/j;"}
    1:1:kotlinx.coroutines.Delay initializeDefaultDelay():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lr0/j;"}
kotlinx.coroutines.Delay -> r0.j:
kotlinx.coroutines.DiagnosticCoroutineContextException -> r0.k:
    kotlin.coroutines.CoroutineContext context -> d
    1:1:void <init>(kotlin.coroutines.CoroutineContext):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;)V"}
    1:1:java.lang.Throwable fillInStackTrace():0:0 -> fillInStackTrace
    1:1:java.lang.String getLocalizedMessage():0:0 -> getLocalizedMessage
kotlinx.coroutines.Dispatchers -> r0.l:
    kotlinx.coroutines.Dispatchers INSTANCE -> a
    kotlinx.coroutines.CoroutineDispatcher Default -> b
    kotlinx.coroutines.CoroutineDispatcher Unconfined -> c
    kotlinx.coroutines.CoroutineDispatcher IO -> d
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:kotlinx.coroutines.CoroutineDispatcher getIO():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lr0/c;"}
    1:1:kotlinx.coroutines.MainCoroutineDispatcher getMain():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lr0/v;"}
kotlinx.coroutines.EventLoop -> r0.m:
    long useCount -> e
    boolean shared -> f
    void <init>() -> <init>
    1:1:long delta(boolean):0:0 -> d
    1:1:long getNextTime():0:0 -> e
    1:1:void incrementUseCount(boolean):0:0 -> f
    1:1:void incrementUseCount$default(kotlinx.coroutines.EventLoop,boolean,int,java.lang.Object):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lr0/m;ZILjava/lang/Object;)V"}
    1:1:boolean isUnconfinedQueueEmpty():0:0 -> h
    1:1:boolean processUnconfinedEvent():0:0 -> i
kotlinx.coroutines.EventLoopImplBase -> r0.o:
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater _queue$FU -> g
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater _delayed$FU -> h
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    1:1:void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/lang/Runnable;)V"}
    1:1:long getNextTime():0:0 -> e
    1:1:java.lang.Runnable dequeue():0:0 -> l
    1:1:void enqueue(java.lang.Runnable):0:0 -> m
    1:1:boolean enqueueImpl(java.lang.Runnable):0:0 -> n
    1:1:boolean isCompleted():0:0 -> o
    1:1:boolean isEmpty():0:0 -> p
    1:1:long processNextEvent():0:0 -> q
    1:1:void resetAll():0:0 -> r
kotlinx.coroutines.EventLoopImplBase$$ExternalSyntheticBackportWithForwarding0 -> r0.n:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:boolean kotlinx.coroutines.EventLoopImplBase$$InternalSyntheticBackportWithForwarding$1$4a2c55d37881f9d71f928fdf4f5de9f6e107cf0ea5766bb8aefda524855451f3$0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
kotlinx.coroutines.EventLoopImplPlatform -> r0.p:
    void <init>() -> <init>
    java.lang.Thread getThread() -> j
    1:1:void unpark():0:0 -> k
kotlinx.coroutines.EventLoop_commonKt -> r0.q:
    kotlinx.coroutines.internal.Symbol DISPOSED_TASK -> a
    kotlinx.coroutines.internal.Symbol CLOSED_EMPTY -> b
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:kotlinx.coroutines.internal.Symbol access$getCLOSED_EMPTY$p():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lt0/l;"}
kotlinx.coroutines.ExecutorCoroutineDispatcher -> r0.r:
    kotlinx.coroutines.ExecutorCoroutineDispatcher$Key Key -> e
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
kotlinx.coroutines.ExecutorCoroutineDispatcher$Key -> r0.r$a:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(kotlin.jvm.internal.DefaultConstructorMarker):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk0/b;)V"}
kotlinx.coroutines.ExecutorCoroutineDispatcher$Key$1 -> r0.r$a$a:
    kotlinx.coroutines.ExecutorCoroutineDispatcher$Key$1 INSTANCE -> e
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    1:1:java.lang.Object invoke(java.lang.Object):0:0 -> a
    1:1:kotlinx.coroutines.ExecutorCoroutineDispatcher invoke(kotlin.coroutines.CoroutineContext$Element):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e$b;)Lr0/r;"}
kotlinx.coroutines.Job -> r0.s:
    kotlinx.coroutines.Job$Key Key -> c
    1:1:void <clinit>():0:0 -> <clinit>
kotlinx.coroutines.Job$Key -> r0.s$a:
    kotlinx.coroutines.Job$Key $$INSTANCE -> a
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
kotlinx.coroutines.JobKt -> r0.t:
    1:1:void cancel(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/util/concurrent/CancellationException;)V"}
kotlinx.coroutines.JobKt__JobKt -> r0.u:
    1:1:void cancel(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/util/concurrent/CancellationException;)V"}
kotlinx.coroutines.MainCoroutineDispatcher -> r0.v:
    void <init>() -> <init>
    kotlinx.coroutines.MainCoroutineDispatcher getImmediate() -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lr0/v;"}
    1:1:java.lang.String toStringInternalImpl():0:0 -> e
kotlinx.coroutines.ThreadLocalEventLoop -> r0.w:
    kotlinx.coroutines.ThreadLocalEventLoop INSTANCE -> a
    java.lang.ThreadLocal ref -> b
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:void setEventLoop$kotlinx_coroutines_core(kotlinx.coroutines.EventLoop):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lr0/m;)V"}
kotlinx.coroutines.Unconfined -> r0.x:
    kotlinx.coroutines.Unconfined INSTANCE -> e
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/lang/Runnable;)V"}
    1:1:boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;)Z"}
    1:1:java.lang.String toString():0:0 -> toString
kotlinx.coroutines.YieldContext -> r0.y:
    kotlinx.coroutines.YieldContext$Key Key -> d
    1:1:void <clinit>():0:0 -> <clinit>
kotlinx.coroutines.YieldContext$Key -> r0.y$a:
    void <init>() -> <init>
    1:1:void <init>(kotlin.jvm.internal.DefaultConstructorMarker):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk0/b;)V"}
kotlinx.coroutines.android.AndroidDispatcherFactory -> kotlinx.coroutines.android.AndroidDispatcherFactory:
    1:1:kotlinx.coroutines.MainCoroutineDispatcher createDispatcher(java.util.List):0:0 -> createDispatcher
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/util/List;)Lr0/v;"}
kotlinx.coroutines.android.AndroidExceptionPreHandler -> kotlinx.coroutines.android.AndroidExceptionPreHandler:
    1:1:void handleException(kotlin.coroutines.CoroutineContext,java.lang.Throwable):0:0 -> handleException
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/lang/Throwable;)V"}
kotlinx.coroutines.android.HandlerContext -> s0.a:
    android.os.Handler handler -> e
    java.lang.String name -> f
    boolean invokeImmediately -> g
    kotlinx.coroutines.android.HandlerContext immediate -> h
    1:1:void <init>(android.os.Handler,java.lang.String):0:0 -> <init>
    2:2:void <init>(android.os.Handler,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Landroid/os/Handler;Ljava/lang/String;ILk0/b;)V"}
    3:3:void <init>(android.os.Handler,java.lang.String,boolean):0:0 -> <init>
    1:1:void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/lang/Runnable;)V"}
    1:1:boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;)Z"}
    1:1:kotlinx.coroutines.MainCoroutineDispatcher getImmediate():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lr0/v;"}
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:void cancelOnRejection(kotlin.coroutines.CoroutineContext,java.lang.Runnable):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/lang/Runnable;)V"}
    1:1:kotlinx.coroutines.android.HandlerContext getImmediate():0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ls0/a;"}
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.String toString():0:0 -> toString
kotlinx.coroutines.android.HandlerDispatcher -> s0.b:
    void <init>() -> <init>
    1:1:void <init>(kotlin.jvm.internal.DefaultConstructorMarker):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk0/b;)V"}
kotlinx.coroutines.android.HandlerDispatcherKt -> s0.c:
    kotlinx.coroutines.android.HandlerDispatcher Main -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:android.os.Handler asHandler(android.os.Looper,boolean):0:0 -> a
kotlinx.coroutines.internal.FastServiceLoader -> t0.a:
    kotlinx.coroutines.internal.FastServiceLoader INSTANCE -> a
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:java.lang.Object getProviderInstance(java.lang.String,java.lang.ClassLoader,java.lang.Class):0:0 -> a
    1:1:java.util.List load(java.lang.Class,java.lang.ClassLoader):0:0 -> b
    1:1:java.util.List loadMainDispatcherFactory$kotlinx_coroutines_core():0:0 -> c
    1:1:java.util.List loadProviders$kotlinx_coroutines_core(java.lang.Class,java.lang.ClassLoader):0:0 -> d
    1:1:java.util.List parse(java.net.URL):0:0 -> e
    1:1:java.util.List parseFile(java.io.BufferedReader):0:0 -> f
kotlinx.coroutines.internal.FastServiceLoaderKt -> t0.b:
    boolean ANDROID_DETECTED -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:boolean getANDROID_DETECTED():0:0 -> a
kotlinx.coroutines.internal.LimitedDispatcher -> t0.c:
    kotlinx.coroutines.CoroutineDispatcher dispatcher -> e
    int parallelism -> f
    kotlinx.coroutines.Delay $$delegate_0 -> g
    kotlinx.coroutines.internal.LockFreeTaskQueue queue -> h
    java.lang.Object workerAllocationLock -> i
    1:1:void <init>(kotlinx.coroutines.CoroutineDispatcher,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lr0/c;I)V"}
    1:1:void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/lang/Runnable;)V"}
    1:1:boolean addAndTryDispatching(java.lang.Runnable):0:0 -> d
    1:1:boolean tryAllocateWorker():0:0 -> e
    1:1:void run():0:0 -> run
kotlinx.coroutines.internal.LimitedDispatcherKt -> t0.d:
    1:1:void checkParallelism(int):0:0 -> a
kotlinx.coroutines.internal.LockFreeTaskQueue -> t0.e:
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater _cur$FU -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(boolean):0:0 -> <init>
    1:1:boolean addLast(java.lang.Object):0:0 -> a
    1:1:void close():0:0 -> b
    1:1:int getSize():0:0 -> c
    1:1:java.lang.Object removeFirstOrNull():0:0 -> d
kotlinx.coroutines.internal.LockFreeTaskQueueCore -> t0.f:
    int capacity -> a
    boolean singleConsumer -> b
    int mask -> c
    java.util.concurrent.atomic.AtomicReferenceArray array -> d
    kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion Companion -> e
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU -> f
    java.util.concurrent.atomic.AtomicLongFieldUpdater _state$FU -> g
    kotlinx.coroutines.internal.Symbol REMOVE_FROZEN -> h
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(int,boolean):0:0 -> <init>
    1:1:int addLast(java.lang.Object):0:0 -> a
    1:1:kotlinx.coroutines.internal.LockFreeTaskQueueCore allocateNextCopy(long):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(J)Lt0/f;"}
    1:1:kotlinx.coroutines.internal.LockFreeTaskQueueCore allocateOrGetNextCopy(long):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(J)Lt0/f;"}
    1:1:boolean close():0:0 -> d
    1:1:kotlinx.coroutines.internal.LockFreeTaskQueueCore fillPlaceholder(int,java.lang.Object):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILjava/lang/Object;)Lt0/f;"}
    1:1:int getSize():0:0 -> f
    1:1:boolean isEmpty():0:0 -> g
    1:1:long markFrozen():0:0 -> h
    1:1:kotlinx.coroutines.internal.LockFreeTaskQueueCore next():0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lt0/f;"}
    1:1:java.lang.Object removeFirstOrNull():0:0 -> j
    1:1:kotlinx.coroutines.internal.LockFreeTaskQueueCore removeSlowPath(int,int):0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"(II)Lt0/f;"}
kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion -> t0.f$a:
    void <init>() -> <init>
    1:1:void <init>(kotlin.jvm.internal.DefaultConstructorMarker):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk0/b;)V"}
    1:1:int addFailReason(long):0:0 -> a
    1:1:long updateHead(long,int):0:0 -> b
    1:1:long updateTail(long,int):0:0 -> c
    1:1:long wo(long,long):0:0 -> d
kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder -> t0.f$b:
    int index -> a
    1:1:void <init>(int):0:0 -> <init>
kotlinx.coroutines.internal.MainDispatcherFactory -> t0.g:
    kotlinx.coroutines.MainCoroutineDispatcher createDispatcher(java.util.List) -> createDispatcher
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/util/List;)Lr0/v;"}
    int getLoadPriority() -> getLoadPriority
    java.lang.String hintOnError() -> hintOnError
kotlinx.coroutines.internal.MainDispatcherLoader -> t0.h:
    kotlinx.coroutines.internal.MainDispatcherLoader INSTANCE -> a
    boolean FAST_SERVICE_LOADER_ENABLED -> b
    kotlinx.coroutines.MainCoroutineDispatcher dispatcher -> c
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:kotlinx.coroutines.MainCoroutineDispatcher loadMainDispatcher():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lr0/v;"}
kotlinx.coroutines.internal.MainDispatchersKt -> t0.i:
    boolean SUPPORT_MISSING -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:kotlinx.coroutines.internal.MissingMainCoroutineDispatcher createMissingDispatcher(java.lang.Throwable,java.lang.String):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Throwable;Ljava/lang/String;)Lt0/j;"}
    1:1:kotlinx.coroutines.internal.MissingMainCoroutineDispatcher createMissingDispatcher$default(java.lang.Throwable,java.lang.String,int,java.lang.Object):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Throwable;Ljava/lang/String;ILjava/lang/Object;)Lt0/j;"}
    1:1:boolean isMissing(kotlinx.coroutines.MainCoroutineDispatcher):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lr0/v;)Z"}
    1:1:java.lang.Void throwMissingMainDispatcherException():0:0 -> d
    1:1:kotlinx.coroutines.MainCoroutineDispatcher tryCreateDispatcher(kotlinx.coroutines.internal.MainDispatcherFactory,java.util.List):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lt0/g;Ljava/util/List;)Lr0/v;"}
kotlinx.coroutines.internal.MissingMainCoroutineDispatcher -> t0.j:
    java.lang.Throwable cause -> e
    java.lang.String errorHint -> f
    1:1:void <init>(java.lang.Throwable,java.lang.String):0:0 -> <init>
    1:1:void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/lang/Runnable;)V"}
    1:1:boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;)Z"}
    1:1:kotlinx.coroutines.MainCoroutineDispatcher getImmediate():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lr0/v;"}
    1:1:java.lang.Void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/lang/Runnable;)Ljava/lang/Void;"}
    1:1:java.lang.Void missing():0:0 -> g
    1:1:java.lang.String toString():0:0 -> toString
kotlinx.coroutines.internal.ResizableAtomicArray -> t0.k:
    1:1:void <init>(int):0:0 -> <init>
    1:1:int currentLength():0:0 -> a
    1:1:java.lang.Object get(int):0:0 -> b
    1:1:void setSynchronized(int,java.lang.Object):0:0 -> c
kotlinx.coroutines.internal.Symbol -> t0.l:
    java.lang.String symbol -> a
    1:1:void <init>(java.lang.String):0:0 -> <init>
    1:1:java.lang.String toString():0:0 -> toString
kotlinx.coroutines.internal.SystemPropsKt -> t0.m:
    1:1:int getAVAILABLE_PROCESSORS():0:0 -> a
    1:1:int systemProp(java.lang.String,int,int,int):0:0 -> b
    1:1:long systemProp(java.lang.String,long,long,long):0:0 -> c
    1:1:java.lang.String systemProp(java.lang.String):0:0 -> d
    1:1:boolean systemProp(java.lang.String,boolean):0:0 -> e
    1:1:int systemProp$default(java.lang.String,int,int,int,int,java.lang.Object):0:0 -> f
    1:1:long systemProp$default(java.lang.String,long,long,long,int,java.lang.Object):0:0 -> g
kotlinx.coroutines.internal.SystemPropsKt__SystemPropsKt -> t0.n:
    int AVAILABLE_PROCESSORS -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:int getAVAILABLE_PROCESSORS():0:0 -> a
    1:1:java.lang.String systemProp(java.lang.String):0:0 -> b
kotlinx.coroutines.internal.SystemPropsKt__SystemProps_commonKt -> t0.o:
    1:1:int systemProp(java.lang.String,int,int,int):0:0 -> a
    1:1:long systemProp(java.lang.String,long,long,long):0:0 -> b
    1:1:boolean systemProp(java.lang.String,boolean):0:0 -> c
    1:1:int systemProp$default(java.lang.String,int,int,int,int,java.lang.Object):0:0 -> d
    1:1:long systemProp$default(java.lang.String,long,long,long,int,java.lang.Object):0:0 -> e
kotlinx.coroutines.scheduling.CoroutineScheduler -> kotlinx.coroutines.scheduling.a:
    int corePoolSize -> d
    int maxPoolSize -> e
    long idleWorkerKeepAliveNs -> f
    java.lang.String schedulerName -> g
    kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue -> h
    kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue -> i
    kotlinx.coroutines.internal.ResizableAtomicArray workers -> j
    kotlinx.coroutines.scheduling.CoroutineScheduler$Companion Companion -> k
    java.util.concurrent.atomic.AtomicLongFieldUpdater parkedWorkersStack$FU -> l
    java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU -> m
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater _isTerminated$FU -> n
    kotlinx.coroutines.internal.Symbol NOT_IN_STACK -> o
    1:1:boolean addToGlobalQueue(kotlinx.coroutines.scheduling.Task):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/h;)Z"}
    1:1:int createNewWorker():0:0 -> b
    1:1:kotlinx.coroutines.scheduling.Task createTask(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Runnable;Lkotlinx/coroutines/scheduling/i;)Lkotlinx/coroutines/scheduling/h;"}
    1:1:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker currentWorker():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lkotlinx/coroutines/scheduling/a$c;"}
    1:1:void dispatch(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Runnable;Lkotlinx/coroutines/scheduling/i;Z)V"}
    1:1:void dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler,java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean,int,java.lang.Object):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/a;Ljava/lang/Runnable;Lkotlinx/coroutines/scheduling/i;ZILjava/lang/Object;)V"}
    1:1:boolean isTerminated():0:0 -> g
    1:1:int parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker):0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/a$c;)I"}
    1:1:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker parkedWorkersStackPop():0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lkotlinx/coroutines/scheduling/a$c;"}
    1:1:boolean parkedWorkersStackPush(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/a$c;)Z"}
    1:1:void parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,int,int):0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/a$c;II)V"}
    1:1:void runSafely(kotlinx.coroutines.scheduling.Task):0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/h;)V"}
    1:1:void shutdown(long):0:0 -> m
    1:1:void signalBlockingWork(boolean):0:0 -> n
    1:1:void signalCpuWork():0:0 -> o
    1:1:kotlinx.coroutines.scheduling.Task submitToLocalQueue(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,kotlinx.coroutines.scheduling.Task,boolean):0:0 -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/a$c;Lkotlinx/coroutines/scheduling/h;Z)Lkotlinx/coroutines/scheduling/h;"}
    1:1:boolean tryCreateWorker(long):0:0 -> q
    1:1:boolean tryCreateWorker$default(kotlinx.coroutines.scheduling.CoroutineScheduler,long,int,java.lang.Object):0:0 -> r
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/a;JILjava/lang/Object;)Z"}
    1:1:boolean tryUnpark():0:0 -> s
kotlinx.coroutines.scheduling.CoroutineScheduler$Companion -> kotlinx.coroutines.scheduling.a$a:
    void <init>() -> <init>
    1:1:void <init>(kotlin.jvm.internal.DefaultConstructorMarker):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk0/b;)V"}
kotlinx.coroutines.scheduling.CoroutineScheduler$WhenMappings -> kotlinx.coroutines.scheduling.a$b:
    int[] $EnumSwitchMapping$0 -> a
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker -> kotlinx.coroutines.scheduling.a$c:
    kotlinx.coroutines.scheduling.WorkQueue localQueue -> d
    kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state -> e
    long terminationDeadline -> f
    long minDelayUntilStealableTaskNs -> g
    int rngState -> h
    boolean mayHaveLocalTasks -> i
    kotlinx.coroutines.scheduling.CoroutineScheduler this$0 -> j
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater workerCtl$FU -> k
    1:1:void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/a;)V"}
    2:2:void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/a;I)V"}
    1:1:kotlinx.coroutines.scheduling.CoroutineScheduler access$getThis$0$p(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/a$c;)Lkotlinx/coroutines/scheduling/a;"}
    1:1:void afterTask(int):0:0 -> b
    1:1:void beforeTask(int):0:0 -> c
    1:1:void executeTask(kotlinx.coroutines.scheduling.Task):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/h;)V"}
    1:1:kotlinx.coroutines.scheduling.Task findAnyTask(boolean):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Z)Lkotlinx/coroutines/scheduling/h;"}
    1:1:kotlinx.coroutines.scheduling.Task findTask(boolean):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Z)Lkotlinx/coroutines/scheduling/h;"}
    1:1:int getIndexInArray():0:0 -> g
    1:1:java.lang.Object getNextParkedWorker():0:0 -> h
    1:1:void idleReset(int):0:0 -> i
    1:1:boolean inStack():0:0 -> j
    1:1:int nextInt(int):0:0 -> k
    1:1:void park():0:0 -> l
    1:1:kotlinx.coroutines.scheduling.Task pollGlobalQueues():0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lkotlinx/coroutines/scheduling/h;"}
    1:1:void runWorker():0:0 -> n
    1:1:void setIndexInArray(int):0:0 -> o
    1:1:void setNextParkedWorker(java.lang.Object):0:0 -> p
    1:1:boolean tryAcquireCpuPermit():0:0 -> q
    1:1:void tryPark():0:0 -> r
    1:1:boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState):0:0 -> s
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/a$d;)Z"}
    1:1:kotlinx.coroutines.scheduling.Task trySteal(boolean):0:0 -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Z)Lkotlinx/coroutines/scheduling/h;"}
    1:1:void tryTerminateWorker():0:0 -> u
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState -> kotlinx.coroutines.scheduling.a$d:
    kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED -> d
    kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING -> e
    kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING -> f
    kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState DORMANT -> g
    kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED -> h
    kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $VALUES -> i
    1:1:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $values():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lkotlinx/coroutines/scheduling/a$d;"}
kotlinx.coroutines.scheduling.DefaultIoScheduler -> kotlinx.coroutines.scheduling.b:
    kotlinx.coroutines.scheduling.DefaultIoScheduler INSTANCE -> f
    kotlinx.coroutines.CoroutineDispatcher default -> g
    1:1:void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/lang/Runnable;)V"}
kotlinx.coroutines.scheduling.DefaultScheduler -> kotlinx.coroutines.scheduling.c:
    kotlinx.coroutines.scheduling.DefaultScheduler INSTANCE -> k
kotlinx.coroutines.scheduling.GlobalQueue -> kotlinx.coroutines.scheduling.d:
kotlinx.coroutines.scheduling.NanoTimeSource -> kotlinx.coroutines.scheduling.e:
    kotlinx.coroutines.scheduling.NanoTimeSource INSTANCE -> a
    1:1:long nanoTime():0:0 -> a
kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher -> kotlinx.coroutines.scheduling.f:
    int corePoolSize -> f
    int maxPoolSize -> g
    long idleWorkerKeepAliveNs -> h
    java.lang.String schedulerName -> i
    kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler -> j
    1:1:void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/lang/Runnable;)V"}
    1:1:kotlinx.coroutines.scheduling.CoroutineScheduler createScheduler():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lkotlinx/coroutines/scheduling/a;"}
    1:1:void dispatchWithContext$kotlinx_coroutines_core(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Runnable;Lkotlinx/coroutines/scheduling/i;Z)V"}
kotlinx.coroutines.scheduling.SchedulerTimeSource -> kotlinx.coroutines.scheduling.g:
    long nanoTime() -> a
kotlinx.coroutines.scheduling.Task -> kotlinx.coroutines.scheduling.h:
    long submissionTime -> d
    kotlinx.coroutines.scheduling.TaskContext taskContext -> e
kotlinx.coroutines.scheduling.TaskContext -> kotlinx.coroutines.scheduling.i:
    int getTaskMode() -> a
    void afterTask() -> b
kotlinx.coroutines.scheduling.TaskContextImpl -> kotlinx.coroutines.scheduling.j:
    int taskMode -> a
    1:1:int getTaskMode():0:0 -> a
    1:1:void afterTask():0:0 -> b
kotlinx.coroutines.scheduling.TaskImpl -> kotlinx.coroutines.scheduling.k:
    java.lang.Runnable block -> f
kotlinx.coroutines.scheduling.TasksKt -> kotlinx.coroutines.scheduling.l:
    long WORK_STEALING_TIME_RESOLUTION_NS -> a
    int CORE_POOL_SIZE -> b
    int MAX_POOL_SIZE -> c
    long IDLE_WORKER_KEEP_ALIVE_NS -> d
    kotlinx.coroutines.scheduling.SchedulerTimeSource schedulerTimeSource -> e
    kotlinx.coroutines.scheduling.TaskContext NonBlockingContext -> f
    kotlinx.coroutines.scheduling.TaskContext BlockingContext -> g
kotlinx.coroutines.scheduling.UnlimitedIoScheduler -> kotlinx.coroutines.scheduling.m:
    kotlinx.coroutines.scheduling.UnlimitedIoScheduler INSTANCE -> e
    1:1:void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le0/e;Ljava/lang/Runnable;)V"}
kotlinx.coroutines.scheduling.WorkQueue -> kotlinx.coroutines.scheduling.o:
    java.util.concurrent.atomic.AtomicReferenceArray buffer -> a
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater lastScheduledTask$FU -> b
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater producerIndex$FU -> c
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater consumerIndex$FU -> d
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater blockingTasksInBuffer$FU -> e
    1:1:kotlinx.coroutines.scheduling.Task add(kotlinx.coroutines.scheduling.Task,boolean):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/h;Z)Lkotlinx/coroutines/scheduling/h;"}
    1:1:kotlinx.coroutines.scheduling.Task add$default(kotlinx.coroutines.scheduling.WorkQueue,kotlinx.coroutines.scheduling.Task,boolean,int,java.lang.Object):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/o;Lkotlinx/coroutines/scheduling/h;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/h;"}
    1:1:kotlinx.coroutines.scheduling.Task addLast(kotlinx.coroutines.scheduling.Task):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/h;)Lkotlinx/coroutines/scheduling/h;"}
    1:1:void decrementIfBlocking(kotlinx.coroutines.scheduling.Task):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/h;)V"}
    1:1:int getBufferSize$kotlinx_coroutines_core():0:0 -> e
    1:1:int getSize$kotlinx_coroutines_core():0:0 -> f
    1:1:void offloadAllWorkTo(kotlinx.coroutines.scheduling.GlobalQueue):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/d;)V"}
    1:1:kotlinx.coroutines.scheduling.Task poll():0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lkotlinx/coroutines/scheduling/h;"}
    1:1:kotlinx.coroutines.scheduling.Task pollBuffer():0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lkotlinx/coroutines/scheduling/h;"}
    1:1:boolean pollTo(kotlinx.coroutines.scheduling.GlobalQueue):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/d;)Z"}
    1:1:long tryStealBlockingFrom(kotlinx.coroutines.scheduling.WorkQueue):0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/o;)J"}
    1:1:long tryStealFrom(kotlinx.coroutines.scheduling.WorkQueue):0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/o;)J"}
    1:1:long tryStealLastScheduled(kotlinx.coroutines.scheduling.WorkQueue,boolean):0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lkotlinx/coroutines/scheduling/o;Z)J"}
kotlinx.coroutines.scheduling.WorkQueue$$ExternalSyntheticBackportWithForwarding0 -> kotlinx.coroutines.scheduling.n:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:boolean kotlinx.coroutines.scheduling.WorkQueue$$InternalSyntheticBackportWithForwarding$1$fea41a45c8396694b734bf6713722fe4232fc4db1f67f3f538fe971a17baaead$0.m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
